// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: live_streaming.proto
// Protobuf Java Version: 4.29.2

package com.sepp89117.goeasypro_android.gopro;

public final class LiveStreaming {
  private LiveStreaming() {}
  static {
    com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
      com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
      /* major= */ 4,
      /* minor= */ 29,
      /* patch= */ 2,
      /* suffix= */ "",
      LiveStreaming.class.getName());
  }
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  /**
   * Protobuf enum {@code com.sepp89117.goeasypro_android.gopro.EnumLens}
   */
  public enum EnumLens
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>LENS_WIDE = 0;</code>
     */
    LENS_WIDE(0),
    /**
     * <code>LENS_LINEAR = 4;</code>
     */
    LENS_LINEAR(4),
    /**
     * <code>LENS_SUPERVIEW = 3;</code>
     */
    LENS_SUPERVIEW(3),
    ;

    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 29,
        /* patch= */ 2,
        /* suffix= */ "",
        EnumLens.class.getName());
    }
    /**
     * <code>LENS_WIDE = 0;</code>
     */
    public static final int LENS_WIDE_VALUE = 0;
    /**
     * <code>LENS_LINEAR = 4;</code>
     */
    public static final int LENS_LINEAR_VALUE = 4;
    /**
     * <code>LENS_SUPERVIEW = 3;</code>
     */
    public static final int LENS_SUPERVIEW_VALUE = 3;


    public final int getNumber() {
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static EnumLens valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static EnumLens forNumber(int value) {
      switch (value) {
        case 0: return LENS_WIDE;
        case 4: return LENS_LINEAR;
        case 3: return LENS_SUPERVIEW;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<EnumLens>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        EnumLens> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<EnumLens>() {
            public EnumLens findValueByNumber(int number) {
              return EnumLens.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.sepp89117.goeasypro_android.gopro.LiveStreaming.getDescriptor().getEnumTypes().get(0);
    }

    private static final EnumLens[] VALUES = values();

    public static EnumLens valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private EnumLens(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:com.sepp89117.goeasypro_android.gopro.EnumLens)
  }

  /**
   * Protobuf enum {@code com.sepp89117.goeasypro_android.gopro.EnumLiveStreamError}
   */
  public enum EnumLiveStreamError
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * No error (success)
     * </pre>
     *
     * <code>LIVE_STREAM_ERROR_NONE = 0;</code>
     */
    LIVE_STREAM_ERROR_NONE(0),
    /**
     * <pre>
     * General network error during the stream
     * </pre>
     *
     * <code>LIVE_STREAM_ERROR_NETWORK = 1;</code>
     */
    LIVE_STREAM_ERROR_NETWORK(1),
    /**
     * <pre>
     * Startup error: bad URL or valid with live stream server
     * </pre>
     *
     * <code>LIVE_STREAM_ERROR_CREATESTREAM = 2;</code>
     */
    LIVE_STREAM_ERROR_CREATESTREAM(2),
    /**
     * <pre>
     * Not enough memory on camera to complete task
     * </pre>
     *
     * <code>LIVE_STREAM_ERROR_OUTOFMEMORY = 3;</code>
     */
    LIVE_STREAM_ERROR_OUTOFMEMORY(3),
    /**
     * <pre>
     * Failed to get stream from low level camera system
     * </pre>
     *
     * <code>LIVE_STREAM_ERROR_INPUTSTREAM = 4;</code>
     */
    LIVE_STREAM_ERROR_INPUTSTREAM(4),
    /**
     * <pre>
     * No internet access detected on startup of streamer
     * </pre>
     *
     * <code>LIVE_STREAM_ERROR_INTERNET = 5;</code>
     */
    LIVE_STREAM_ERROR_INTERNET(5),
    /**
     * <pre>
     * Error occured in linux networking stack. Usually means the server closed the connection
     * </pre>
     *
     * <code>LIVE_STREAM_ERROR_OSNETWORK = 6;</code>
     */
    LIVE_STREAM_ERROR_OSNETWORK(6),
    /**
     * <pre>
     * Timed out attemping to connect to the wifi network when attemping live stream
     * </pre>
     *
     * <code>LIVE_STREAM_ERROR_SELECTEDNETWORKTIMEOUT = 7;</code>
     */
    LIVE_STREAM_ERROR_SELECTEDNETWORKTIMEOUT(7),
    /**
     * <pre>
     * SSL handshake failed (commonly caused due to incorrect time / time zone)
     * </pre>
     *
     * <code>LIVE_STREAM_ERROR_SSL_HANDSHAKE = 8;</code>
     */
    LIVE_STREAM_ERROR_SSL_HANDSHAKE(8),
    /**
     * <pre>
     * Low level camera system rejected attempt to start live stream
     * </pre>
     *
     * <code>LIVE_STREAM_ERROR_CAMERA_BLOCKED = 9;</code>
     */
    LIVE_STREAM_ERROR_CAMERA_BLOCKED(9),
    /**
     * <pre>
     * Unknown
     * </pre>
     *
     * <code>LIVE_STREAM_ERROR_UNKNOWN = 10;</code>
     */
    LIVE_STREAM_ERROR_UNKNOWN(10),
    /**
     * <pre>
     * Can not perform livestream because sd card is full
     * </pre>
     *
     * <code>LIVE_STREAM_ERROR_SD_CARD_FULL = 40;</code>
     */
    LIVE_STREAM_ERROR_SD_CARD_FULL(40),
    /**
     * <pre>
     * Livestream stopped because sd card was removed
     * </pre>
     *
     * <code>LIVE_STREAM_ERROR_SD_CARD_REMOVED = 41;</code>
     */
    LIVE_STREAM_ERROR_SD_CARD_REMOVED(41),
    ;

    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 29,
        /* patch= */ 2,
        /* suffix= */ "",
        EnumLiveStreamError.class.getName());
    }
    /**
     * <pre>
     * No error (success)
     * </pre>
     *
     * <code>LIVE_STREAM_ERROR_NONE = 0;</code>
     */
    public static final int LIVE_STREAM_ERROR_NONE_VALUE = 0;
    /**
     * <pre>
     * General network error during the stream
     * </pre>
     *
     * <code>LIVE_STREAM_ERROR_NETWORK = 1;</code>
     */
    public static final int LIVE_STREAM_ERROR_NETWORK_VALUE = 1;
    /**
     * <pre>
     * Startup error: bad URL or valid with live stream server
     * </pre>
     *
     * <code>LIVE_STREAM_ERROR_CREATESTREAM = 2;</code>
     */
    public static final int LIVE_STREAM_ERROR_CREATESTREAM_VALUE = 2;
    /**
     * <pre>
     * Not enough memory on camera to complete task
     * </pre>
     *
     * <code>LIVE_STREAM_ERROR_OUTOFMEMORY = 3;</code>
     */
    public static final int LIVE_STREAM_ERROR_OUTOFMEMORY_VALUE = 3;
    /**
     * <pre>
     * Failed to get stream from low level camera system
     * </pre>
     *
     * <code>LIVE_STREAM_ERROR_INPUTSTREAM = 4;</code>
     */
    public static final int LIVE_STREAM_ERROR_INPUTSTREAM_VALUE = 4;
    /**
     * <pre>
     * No internet access detected on startup of streamer
     * </pre>
     *
     * <code>LIVE_STREAM_ERROR_INTERNET = 5;</code>
     */
    public static final int LIVE_STREAM_ERROR_INTERNET_VALUE = 5;
    /**
     * <pre>
     * Error occured in linux networking stack. Usually means the server closed the connection
     * </pre>
     *
     * <code>LIVE_STREAM_ERROR_OSNETWORK = 6;</code>
     */
    public static final int LIVE_STREAM_ERROR_OSNETWORK_VALUE = 6;
    /**
     * <pre>
     * Timed out attemping to connect to the wifi network when attemping live stream
     * </pre>
     *
     * <code>LIVE_STREAM_ERROR_SELECTEDNETWORKTIMEOUT = 7;</code>
     */
    public static final int LIVE_STREAM_ERROR_SELECTEDNETWORKTIMEOUT_VALUE = 7;
    /**
     * <pre>
     * SSL handshake failed (commonly caused due to incorrect time / time zone)
     * </pre>
     *
     * <code>LIVE_STREAM_ERROR_SSL_HANDSHAKE = 8;</code>
     */
    public static final int LIVE_STREAM_ERROR_SSL_HANDSHAKE_VALUE = 8;
    /**
     * <pre>
     * Low level camera system rejected attempt to start live stream
     * </pre>
     *
     * <code>LIVE_STREAM_ERROR_CAMERA_BLOCKED = 9;</code>
     */
    public static final int LIVE_STREAM_ERROR_CAMERA_BLOCKED_VALUE = 9;
    /**
     * <pre>
     * Unknown
     * </pre>
     *
     * <code>LIVE_STREAM_ERROR_UNKNOWN = 10;</code>
     */
    public static final int LIVE_STREAM_ERROR_UNKNOWN_VALUE = 10;
    /**
     * <pre>
     * Can not perform livestream because sd card is full
     * </pre>
     *
     * <code>LIVE_STREAM_ERROR_SD_CARD_FULL = 40;</code>
     */
    public static final int LIVE_STREAM_ERROR_SD_CARD_FULL_VALUE = 40;
    /**
     * <pre>
     * Livestream stopped because sd card was removed
     * </pre>
     *
     * <code>LIVE_STREAM_ERROR_SD_CARD_REMOVED = 41;</code>
     */
    public static final int LIVE_STREAM_ERROR_SD_CARD_REMOVED_VALUE = 41;


    public final int getNumber() {
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static EnumLiveStreamError valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static EnumLiveStreamError forNumber(int value) {
      switch (value) {
        case 0: return LIVE_STREAM_ERROR_NONE;
        case 1: return LIVE_STREAM_ERROR_NETWORK;
        case 2: return LIVE_STREAM_ERROR_CREATESTREAM;
        case 3: return LIVE_STREAM_ERROR_OUTOFMEMORY;
        case 4: return LIVE_STREAM_ERROR_INPUTSTREAM;
        case 5: return LIVE_STREAM_ERROR_INTERNET;
        case 6: return LIVE_STREAM_ERROR_OSNETWORK;
        case 7: return LIVE_STREAM_ERROR_SELECTEDNETWORKTIMEOUT;
        case 8: return LIVE_STREAM_ERROR_SSL_HANDSHAKE;
        case 9: return LIVE_STREAM_ERROR_CAMERA_BLOCKED;
        case 10: return LIVE_STREAM_ERROR_UNKNOWN;
        case 40: return LIVE_STREAM_ERROR_SD_CARD_FULL;
        case 41: return LIVE_STREAM_ERROR_SD_CARD_REMOVED;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<EnumLiveStreamError>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        EnumLiveStreamError> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<EnumLiveStreamError>() {
            public EnumLiveStreamError findValueByNumber(int number) {
              return EnumLiveStreamError.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.sepp89117.goeasypro_android.gopro.LiveStreaming.getDescriptor().getEnumTypes().get(1);
    }

    private static final EnumLiveStreamError[] VALUES = values();

    public static EnumLiveStreamError valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private EnumLiveStreamError(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:com.sepp89117.goeasypro_android.gopro.EnumLiveStreamError)
  }

  /**
   * Protobuf enum {@code com.sepp89117.goeasypro_android.gopro.EnumLiveStreamStatus}
   */
  public enum EnumLiveStreamStatus
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * Initial status. Livestream has not yet been configured
     * </pre>
     *
     * <code>LIVE_STREAM_STATE_IDLE = 0;</code>
     */
    LIVE_STREAM_STATE_IDLE(0),
    /**
     * <pre>
     * Livestream is being configured
     * </pre>
     *
     * <code>LIVE_STREAM_STATE_CONFIG = 1;</code>
     */
    LIVE_STREAM_STATE_CONFIG(1),
    /**
     * <pre>
     * Livestream has finished configuration and is ready to start streaming
     * </pre>
     *
     * <code>LIVE_STREAM_STATE_READY = 2;</code>
     */
    LIVE_STREAM_STATE_READY(2),
    /**
     * <pre>
     * Livestream is actively streaming
     * </pre>
     *
     * <code>LIVE_STREAM_STATE_STREAMING = 3;</code>
     */
    LIVE_STREAM_STATE_STREAMING(3),
    /**
     * <pre>
     * Live stream is exiting. No errors occured.
     * </pre>
     *
     * <code>LIVE_STREAM_STATE_COMPLETE_STAY_ON = 4;</code>
     */
    LIVE_STREAM_STATE_COMPLETE_STAY_ON(4),
    /**
     * <pre>
     * Live stream is exiting. An error occurred.
     * </pre>
     *
     * <code>LIVE_STREAM_STATE_FAILED_STAY_ON = 5;</code>
     */
    LIVE_STREAM_STATE_FAILED_STAY_ON(5),
    /**
     * <pre>
     * An error occurred during livestream and stream is attempting to reconnect.
     * </pre>
     *
     * <code>LIVE_STREAM_STATE_RECONNECTING = 6;</code>
     */
    LIVE_STREAM_STATE_RECONNECTING(6),
    /**
     * <pre>
     * Live stream setup is unavailable due to camera lens configuration
     * </pre>
     *
     * <code>LIVE_STREAM_STATE_UNAVAILABLE = 7;</code>
     */
    LIVE_STREAM_STATE_UNAVAILABLE(7),
    ;

    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 29,
        /* patch= */ 2,
        /* suffix= */ "",
        EnumLiveStreamStatus.class.getName());
    }
    /**
     * <pre>
     * Initial status. Livestream has not yet been configured
     * </pre>
     *
     * <code>LIVE_STREAM_STATE_IDLE = 0;</code>
     */
    public static final int LIVE_STREAM_STATE_IDLE_VALUE = 0;
    /**
     * <pre>
     * Livestream is being configured
     * </pre>
     *
     * <code>LIVE_STREAM_STATE_CONFIG = 1;</code>
     */
    public static final int LIVE_STREAM_STATE_CONFIG_VALUE = 1;
    /**
     * <pre>
     * Livestream has finished configuration and is ready to start streaming
     * </pre>
     *
     * <code>LIVE_STREAM_STATE_READY = 2;</code>
     */
    public static final int LIVE_STREAM_STATE_READY_VALUE = 2;
    /**
     * <pre>
     * Livestream is actively streaming
     * </pre>
     *
     * <code>LIVE_STREAM_STATE_STREAMING = 3;</code>
     */
    public static final int LIVE_STREAM_STATE_STREAMING_VALUE = 3;
    /**
     * <pre>
     * Live stream is exiting. No errors occured.
     * </pre>
     *
     * <code>LIVE_STREAM_STATE_COMPLETE_STAY_ON = 4;</code>
     */
    public static final int LIVE_STREAM_STATE_COMPLETE_STAY_ON_VALUE = 4;
    /**
     * <pre>
     * Live stream is exiting. An error occurred.
     * </pre>
     *
     * <code>LIVE_STREAM_STATE_FAILED_STAY_ON = 5;</code>
     */
    public static final int LIVE_STREAM_STATE_FAILED_STAY_ON_VALUE = 5;
    /**
     * <pre>
     * An error occurred during livestream and stream is attempting to reconnect.
     * </pre>
     *
     * <code>LIVE_STREAM_STATE_RECONNECTING = 6;</code>
     */
    public static final int LIVE_STREAM_STATE_RECONNECTING_VALUE = 6;
    /**
     * <pre>
     * Live stream setup is unavailable due to camera lens configuration
     * </pre>
     *
     * <code>LIVE_STREAM_STATE_UNAVAILABLE = 7;</code>
     */
    public static final int LIVE_STREAM_STATE_UNAVAILABLE_VALUE = 7;


    public final int getNumber() {
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static EnumLiveStreamStatus valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static EnumLiveStreamStatus forNumber(int value) {
      switch (value) {
        case 0: return LIVE_STREAM_STATE_IDLE;
        case 1: return LIVE_STREAM_STATE_CONFIG;
        case 2: return LIVE_STREAM_STATE_READY;
        case 3: return LIVE_STREAM_STATE_STREAMING;
        case 4: return LIVE_STREAM_STATE_COMPLETE_STAY_ON;
        case 5: return LIVE_STREAM_STATE_FAILED_STAY_ON;
        case 6: return LIVE_STREAM_STATE_RECONNECTING;
        case 7: return LIVE_STREAM_STATE_UNAVAILABLE;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<EnumLiveStreamStatus>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        EnumLiveStreamStatus> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<EnumLiveStreamStatus>() {
            public EnumLiveStreamStatus findValueByNumber(int number) {
              return EnumLiveStreamStatus.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.sepp89117.goeasypro_android.gopro.LiveStreaming.getDescriptor().getEnumTypes().get(2);
    }

    private static final EnumLiveStreamStatus[] VALUES = values();

    public static EnumLiveStreamStatus valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private EnumLiveStreamStatus(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:com.sepp89117.goeasypro_android.gopro.EnumLiveStreamStatus)
  }

  /**
   * Protobuf enum {@code com.sepp89117.goeasypro_android.gopro.EnumRegisterLiveStreamStatus}
   */
  public enum EnumRegisterLiveStreamStatus
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>REGISTER_LIVE_STREAM_STATUS_STATUS = 1;</code>
     */
    REGISTER_LIVE_STREAM_STATUS_STATUS(1),
    /**
     * <code>REGISTER_LIVE_STREAM_STATUS_ERROR = 2;</code>
     */
    REGISTER_LIVE_STREAM_STATUS_ERROR(2),
    /**
     * <code>REGISTER_LIVE_STREAM_STATUS_MODE = 3;</code>
     */
    REGISTER_LIVE_STREAM_STATUS_MODE(3),
    /**
     * <code>REGISTER_LIVE_STREAM_STATUS_BITRATE = 4;</code>
     */
    REGISTER_LIVE_STREAM_STATUS_BITRATE(4),
    ;

    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 29,
        /* patch= */ 2,
        /* suffix= */ "",
        EnumRegisterLiveStreamStatus.class.getName());
    }
    /**
     * <code>REGISTER_LIVE_STREAM_STATUS_STATUS = 1;</code>
     */
    public static final int REGISTER_LIVE_STREAM_STATUS_STATUS_VALUE = 1;
    /**
     * <code>REGISTER_LIVE_STREAM_STATUS_ERROR = 2;</code>
     */
    public static final int REGISTER_LIVE_STREAM_STATUS_ERROR_VALUE = 2;
    /**
     * <code>REGISTER_LIVE_STREAM_STATUS_MODE = 3;</code>
     */
    public static final int REGISTER_LIVE_STREAM_STATUS_MODE_VALUE = 3;
    /**
     * <code>REGISTER_LIVE_STREAM_STATUS_BITRATE = 4;</code>
     */
    public static final int REGISTER_LIVE_STREAM_STATUS_BITRATE_VALUE = 4;


    public final int getNumber() {
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static EnumRegisterLiveStreamStatus valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static EnumRegisterLiveStreamStatus forNumber(int value) {
      switch (value) {
        case 1: return REGISTER_LIVE_STREAM_STATUS_STATUS;
        case 2: return REGISTER_LIVE_STREAM_STATUS_ERROR;
        case 3: return REGISTER_LIVE_STREAM_STATUS_MODE;
        case 4: return REGISTER_LIVE_STREAM_STATUS_BITRATE;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<EnumRegisterLiveStreamStatus>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        EnumRegisterLiveStreamStatus> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<EnumRegisterLiveStreamStatus>() {
            public EnumRegisterLiveStreamStatus findValueByNumber(int number) {
              return EnumRegisterLiveStreamStatus.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.sepp89117.goeasypro_android.gopro.LiveStreaming.getDescriptor().getEnumTypes().get(3);
    }

    private static final EnumRegisterLiveStreamStatus[] VALUES = values();

    public static EnumRegisterLiveStreamStatus valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private EnumRegisterLiveStreamStatus(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:com.sepp89117.goeasypro_android.gopro.EnumRegisterLiveStreamStatus)
  }

  /**
   * Protobuf enum {@code com.sepp89117.goeasypro_android.gopro.EnumWindowSize}
   */
  public enum EnumWindowSize
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>WINDOW_SIZE_480 = 4;</code>
     */
    WINDOW_SIZE_480(4),
    /**
     * <code>WINDOW_SIZE_720 = 7;</code>
     */
    WINDOW_SIZE_720(7),
    /**
     * <code>WINDOW_SIZE_1080 = 12;</code>
     */
    WINDOW_SIZE_1080(12),
    ;

    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 29,
        /* patch= */ 2,
        /* suffix= */ "",
        EnumWindowSize.class.getName());
    }
    /**
     * <code>WINDOW_SIZE_480 = 4;</code>
     */
    public static final int WINDOW_SIZE_480_VALUE = 4;
    /**
     * <code>WINDOW_SIZE_720 = 7;</code>
     */
    public static final int WINDOW_SIZE_720_VALUE = 7;
    /**
     * <code>WINDOW_SIZE_1080 = 12;</code>
     */
    public static final int WINDOW_SIZE_1080_VALUE = 12;


    public final int getNumber() {
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static EnumWindowSize valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static EnumWindowSize forNumber(int value) {
      switch (value) {
        case 4: return WINDOW_SIZE_480;
        case 7: return WINDOW_SIZE_720;
        case 12: return WINDOW_SIZE_1080;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<EnumWindowSize>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        EnumWindowSize> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<EnumWindowSize>() {
            public EnumWindowSize findValueByNumber(int number) {
              return EnumWindowSize.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.sepp89117.goeasypro_android.gopro.LiveStreaming.getDescriptor().getEnumTypes().get(4);
    }

    private static final EnumWindowSize[] VALUES = values();

    public static EnumWindowSize valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private EnumWindowSize(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:com.sepp89117.goeasypro_android.gopro.EnumWindowSize)
  }

  public interface NotifyLiveStreamStatusOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.sepp89117.goeasypro_android.gopro.NotifyLiveStreamStatus)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Live stream status
     * </pre>
     *
     * <code>optional .com.sepp89117.goeasypro_android.gopro.EnumLiveStreamStatus live_stream_status = 1;</code>
     * @return Whether the liveStreamStatus field is set.
     */
    boolean hasLiveStreamStatus();
    /**
     * <pre>
     * Live stream status
     * </pre>
     *
     * <code>optional .com.sepp89117.goeasypro_android.gopro.EnumLiveStreamStatus live_stream_status = 1;</code>
     * @return The liveStreamStatus.
     */
    com.sepp89117.goeasypro_android.gopro.LiveStreaming.EnumLiveStreamStatus getLiveStreamStatus();

    /**
     * <pre>
     * Live stream error
     * </pre>
     *
     * <code>optional .com.sepp89117.goeasypro_android.gopro.EnumLiveStreamError live_stream_error = 2;</code>
     * @return Whether the liveStreamError field is set.
     */
    boolean hasLiveStreamError();
    /**
     * <pre>
     * Live stream error
     * </pre>
     *
     * <code>optional .com.sepp89117.goeasypro_android.gopro.EnumLiveStreamError live_stream_error = 2;</code>
     * @return The liveStreamError.
     */
    com.sepp89117.goeasypro_android.gopro.LiveStreaming.EnumLiveStreamError getLiveStreamError();

    /**
     * <pre>
     * Is live stream encoding?
     * </pre>
     *
     * <code>optional bool live_stream_encode = 3;</code>
     * @return Whether the liveStreamEncode field is set.
     */
    boolean hasLiveStreamEncode();
    /**
     * <pre>
     * Is live stream encoding?
     * </pre>
     *
     * <code>optional bool live_stream_encode = 3;</code>
     * @return The liveStreamEncode.
     */
    boolean getLiveStreamEncode();

    /**
     * <pre>
     * Live stream bitrate (Kbps)
     * </pre>
     *
     * <code>optional int32 live_stream_bitrate = 4;</code>
     * @return Whether the liveStreamBitrate field is set.
     */
    boolean hasLiveStreamBitrate();
    /**
     * <pre>
     * Live stream bitrate (Kbps)
     * </pre>
     *
     * <code>optional int32 live_stream_bitrate = 4;</code>
     * @return The liveStreamBitrate.
     */
    int getLiveStreamBitrate();

    /**
     * <pre>
     * Set of currently supported resolutions
     * </pre>
     *
     * <code>repeated .com.sepp89117.goeasypro_android.gopro.EnumWindowSize live_stream_window_size_supported_array = 5;</code>
     * @return A list containing the liveStreamWindowSizeSupportedArray.
     */
    java.util.List<com.sepp89117.goeasypro_android.gopro.LiveStreaming.EnumWindowSize> getLiveStreamWindowSizeSupportedArrayList();
    /**
     * <pre>
     * Set of currently supported resolutions
     * </pre>
     *
     * <code>repeated .com.sepp89117.goeasypro_android.gopro.EnumWindowSize live_stream_window_size_supported_array = 5;</code>
     * @return The count of liveStreamWindowSizeSupportedArray.
     */
    int getLiveStreamWindowSizeSupportedArrayCount();
    /**
     * <pre>
     * Set of currently supported resolutions
     * </pre>
     *
     * <code>repeated .com.sepp89117.goeasypro_android.gopro.EnumWindowSize live_stream_window_size_supported_array = 5;</code>
     * @param index The index of the element to return.
     * @return The liveStreamWindowSizeSupportedArray at the given index.
     */
    com.sepp89117.goeasypro_android.gopro.LiveStreaming.EnumWindowSize getLiveStreamWindowSizeSupportedArray(int index);

    /**
     * <pre>
     * Does the camera support encoding while live streaming?
     * </pre>
     *
     * <code>optional bool live_stream_encode_supported = 6;</code>
     * @return Whether the liveStreamEncodeSupported field is set.
     */
    boolean hasLiveStreamEncodeSupported();
    /**
     * <pre>
     * Does the camera support encoding while live streaming?
     * </pre>
     *
     * <code>optional bool live_stream_encode_supported = 6;</code>
     * @return The liveStreamEncodeSupported.
     */
    boolean getLiveStreamEncodeSupported();

    /**
     * <pre>
     * Is the Max Lens feature NOT supported?
     * </pre>
     *
     * <code>optional bool live_stream_max_lens_unsupported = 7;</code>
     * @return Whether the liveStreamMaxLensUnsupported field is set.
     */
    boolean hasLiveStreamMaxLensUnsupported();
    /**
     * <pre>
     * Is the Max Lens feature NOT supported?
     * </pre>
     *
     * <code>optional bool live_stream_max_lens_unsupported = 7;</code>
     * @return The liveStreamMaxLensUnsupported.
     */
    boolean getLiveStreamMaxLensUnsupported();

    /**
     * <pre>
     * Camera-defined minimum bitrate (static) (Kbps)
     * </pre>
     *
     * <code>optional int32 live_stream_minimum_stream_bitrate = 8;</code>
     * @return Whether the liveStreamMinimumStreamBitrate field is set.
     */
    boolean hasLiveStreamMinimumStreamBitrate();
    /**
     * <pre>
     * Camera-defined minimum bitrate (static) (Kbps)
     * </pre>
     *
     * <code>optional int32 live_stream_minimum_stream_bitrate = 8;</code>
     * @return The liveStreamMinimumStreamBitrate.
     */
    int getLiveStreamMinimumStreamBitrate();

    /**
     * <pre>
     * Camera-defined maximum bitrate (static) (Kbps)
     * </pre>
     *
     * <code>optional int32 live_stream_maximum_stream_bitrate = 9;</code>
     * @return Whether the liveStreamMaximumStreamBitrate field is set.
     */
    boolean hasLiveStreamMaximumStreamBitrate();
    /**
     * <pre>
     * Camera-defined maximum bitrate (static) (Kbps)
     * </pre>
     *
     * <code>optional int32 live_stream_maximum_stream_bitrate = 9;</code>
     * @return The liveStreamMaximumStreamBitrate.
     */
    int getLiveStreamMaximumStreamBitrate();

    /**
     * <pre>
     * Does camera support setting lens for live streaming?
     * </pre>
     *
     * <code>optional bool live_stream_lens_supported = 10;</code>
     * @return Whether the liveStreamLensSupported field is set.
     */
    boolean hasLiveStreamLensSupported();
    /**
     * <pre>
     * Does camera support setting lens for live streaming?
     * </pre>
     *
     * <code>optional bool live_stream_lens_supported = 10;</code>
     * @return The liveStreamLensSupported.
     */
    boolean getLiveStreamLensSupported();

    /**
     * <pre>
     * Set of currently supported FOV options
     * </pre>
     *
     * <code>repeated .com.sepp89117.goeasypro_android.gopro.EnumLens live_stream_lens_supported_array = 11;</code>
     * @return A list containing the liveStreamLensSupportedArray.
     */
    java.util.List<com.sepp89117.goeasypro_android.gopro.LiveStreaming.EnumLens> getLiveStreamLensSupportedArrayList();
    /**
     * <pre>
     * Set of currently supported FOV options
     * </pre>
     *
     * <code>repeated .com.sepp89117.goeasypro_android.gopro.EnumLens live_stream_lens_supported_array = 11;</code>
     * @return The count of liveStreamLensSupportedArray.
     */
    int getLiveStreamLensSupportedArrayCount();
    /**
     * <pre>
     * Set of currently supported FOV options
     * </pre>
     *
     * <code>repeated .com.sepp89117.goeasypro_android.gopro.EnumLens live_stream_lens_supported_array = 11;</code>
     * @param index The index of the element to return.
     * @return The liveStreamLensSupportedArray at the given index.
     */
    com.sepp89117.goeasypro_android.gopro.LiveStreaming.EnumLens getLiveStreamLensSupportedArray(int index);

    /**
     * <pre>
     * Does the camera support live stream protune settings
     * </pre>
     *
     * <code>optional bool live_stream_protune_supported = 13;</code>
     * @return Whether the liveStreamProtuneSupported field is set.
     */
    boolean hasLiveStreamProtuneSupported();
    /**
     * <pre>
     * Does the camera support live stream protune settings
     * </pre>
     *
     * <code>optional bool live_stream_protune_supported = 13;</code>
     * @return The liveStreamProtuneSupported.
     */
    boolean getLiveStreamProtuneSupported();
  }
  /**
   * <pre>
   * *
   * Live Stream status
   *
   * Sent either:
   *
   * - As a synchronous response to initial &#64;ref RequestGetLiveStreamStatus
   * - As an asynchronous notifications registered for via &#64;ref RequestGetLiveStreamStatus
   * </pre>
   *
   * Protobuf type {@code com.sepp89117.goeasypro_android.gopro.NotifyLiveStreamStatus}
   */
  public static final class NotifyLiveStreamStatus extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:com.sepp89117.goeasypro_android.gopro.NotifyLiveStreamStatus)
      NotifyLiveStreamStatusOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 29,
        /* patch= */ 2,
        /* suffix= */ "",
        NotifyLiveStreamStatus.class.getName());
    }
    // Use NotifyLiveStreamStatus.newBuilder() to construct.
    private NotifyLiveStreamStatus(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    NotifyLiveStreamStatus() {
      liveStreamStatus_ = 0;
      liveStreamError_ = 0;
      liveStreamWindowSizeSupportedArray_ = emptyIntList();
      liveStreamLensSupportedArray_ = emptyIntList();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.sepp89117.goeasypro_android.gopro.LiveStreaming.internal_static_com_sepp89117_goeasypro_android_gopro_NotifyLiveStreamStatus_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.sepp89117.goeasypro_android.gopro.LiveStreaming.internal_static_com_sepp89117_goeasypro_android_gopro_NotifyLiveStreamStatus_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.sepp89117.goeasypro_android.gopro.LiveStreaming.NotifyLiveStreamStatus.class, com.sepp89117.goeasypro_android.gopro.LiveStreaming.NotifyLiveStreamStatus.Builder.class);
    }

    private int bitField0_;
    public static final int LIVE_STREAM_STATUS_FIELD_NUMBER = 1;
    private int liveStreamStatus_ = 0;
    /**
     * <pre>
     * Live stream status
     * </pre>
     *
     * <code>optional .com.sepp89117.goeasypro_android.gopro.EnumLiveStreamStatus live_stream_status = 1;</code>
     * @return Whether the liveStreamStatus field is set.
     */
    @java.lang.Override public boolean hasLiveStreamStatus() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * Live stream status
     * </pre>
     *
     * <code>optional .com.sepp89117.goeasypro_android.gopro.EnumLiveStreamStatus live_stream_status = 1;</code>
     * @return The liveStreamStatus.
     */
    @java.lang.Override public com.sepp89117.goeasypro_android.gopro.LiveStreaming.EnumLiveStreamStatus getLiveStreamStatus() {
      com.sepp89117.goeasypro_android.gopro.LiveStreaming.EnumLiveStreamStatus result = com.sepp89117.goeasypro_android.gopro.LiveStreaming.EnumLiveStreamStatus.forNumber(liveStreamStatus_);
      return result == null ? com.sepp89117.goeasypro_android.gopro.LiveStreaming.EnumLiveStreamStatus.LIVE_STREAM_STATE_IDLE : result;
    }

    public static final int LIVE_STREAM_ERROR_FIELD_NUMBER = 2;
    private int liveStreamError_ = 0;
    /**
     * <pre>
     * Live stream error
     * </pre>
     *
     * <code>optional .com.sepp89117.goeasypro_android.gopro.EnumLiveStreamError live_stream_error = 2;</code>
     * @return Whether the liveStreamError field is set.
     */
    @java.lang.Override public boolean hasLiveStreamError() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * Live stream error
     * </pre>
     *
     * <code>optional .com.sepp89117.goeasypro_android.gopro.EnumLiveStreamError live_stream_error = 2;</code>
     * @return The liveStreamError.
     */
    @java.lang.Override public com.sepp89117.goeasypro_android.gopro.LiveStreaming.EnumLiveStreamError getLiveStreamError() {
      com.sepp89117.goeasypro_android.gopro.LiveStreaming.EnumLiveStreamError result = com.sepp89117.goeasypro_android.gopro.LiveStreaming.EnumLiveStreamError.forNumber(liveStreamError_);
      return result == null ? com.sepp89117.goeasypro_android.gopro.LiveStreaming.EnumLiveStreamError.LIVE_STREAM_ERROR_NONE : result;
    }

    public static final int LIVE_STREAM_ENCODE_FIELD_NUMBER = 3;
    private boolean liveStreamEncode_ = false;
    /**
     * <pre>
     * Is live stream encoding?
     * </pre>
     *
     * <code>optional bool live_stream_encode = 3;</code>
     * @return Whether the liveStreamEncode field is set.
     */
    @java.lang.Override
    public boolean hasLiveStreamEncode() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * Is live stream encoding?
     * </pre>
     *
     * <code>optional bool live_stream_encode = 3;</code>
     * @return The liveStreamEncode.
     */
    @java.lang.Override
    public boolean getLiveStreamEncode() {
      return liveStreamEncode_;
    }

    public static final int LIVE_STREAM_BITRATE_FIELD_NUMBER = 4;
    private int liveStreamBitrate_ = 0;
    /**
     * <pre>
     * Live stream bitrate (Kbps)
     * </pre>
     *
     * <code>optional int32 live_stream_bitrate = 4;</code>
     * @return Whether the liveStreamBitrate field is set.
     */
    @java.lang.Override
    public boolean hasLiveStreamBitrate() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <pre>
     * Live stream bitrate (Kbps)
     * </pre>
     *
     * <code>optional int32 live_stream_bitrate = 4;</code>
     * @return The liveStreamBitrate.
     */
    @java.lang.Override
    public int getLiveStreamBitrate() {
      return liveStreamBitrate_;
    }

    public static final int LIVE_STREAM_WINDOW_SIZE_SUPPORTED_ARRAY_FIELD_NUMBER = 5;
    @SuppressWarnings("serial")
    private com.google.protobuf.Internal.IntList liveStreamWindowSizeSupportedArray_;
    private static final com.google.protobuf.Internal.IntListAdapter.IntConverter<
        com.sepp89117.goeasypro_android.gopro.LiveStreaming.EnumWindowSize> liveStreamWindowSizeSupportedArray_converter_ =
            new com.google.protobuf.Internal.IntListAdapter.IntConverter<
                com.sepp89117.goeasypro_android.gopro.LiveStreaming.EnumWindowSize>() {
              public com.sepp89117.goeasypro_android.gopro.LiveStreaming.EnumWindowSize convert(int from) {
                com.sepp89117.goeasypro_android.gopro.LiveStreaming.EnumWindowSize result = com.sepp89117.goeasypro_android.gopro.LiveStreaming.EnumWindowSize.forNumber(from);
                return result == null ? com.sepp89117.goeasypro_android.gopro.LiveStreaming.EnumWindowSize.WINDOW_SIZE_480 : result;
              }
            };
    /**
     * <pre>
     * Set of currently supported resolutions
     * </pre>
     *
     * <code>repeated .com.sepp89117.goeasypro_android.gopro.EnumWindowSize live_stream_window_size_supported_array = 5;</code>
     * @return A list containing the liveStreamWindowSizeSupportedArray.
     */
    @java.lang.Override
    public java.util.List<com.sepp89117.goeasypro_android.gopro.LiveStreaming.EnumWindowSize> getLiveStreamWindowSizeSupportedArrayList() {
      return new com.google.protobuf.Internal.IntListAdapter<
          com.sepp89117.goeasypro_android.gopro.LiveStreaming.EnumWindowSize>(liveStreamWindowSizeSupportedArray_, liveStreamWindowSizeSupportedArray_converter_);
    }
    /**
     * <pre>
     * Set of currently supported resolutions
     * </pre>
     *
     * <code>repeated .com.sepp89117.goeasypro_android.gopro.EnumWindowSize live_stream_window_size_supported_array = 5;</code>
     * @return The count of liveStreamWindowSizeSupportedArray.
     */
    @java.lang.Override
    public int getLiveStreamWindowSizeSupportedArrayCount() {
      return liveStreamWindowSizeSupportedArray_.size();
    }
    /**
     * <pre>
     * Set of currently supported resolutions
     * </pre>
     *
     * <code>repeated .com.sepp89117.goeasypro_android.gopro.EnumWindowSize live_stream_window_size_supported_array = 5;</code>
     * @param index The index of the element to return.
     * @return The liveStreamWindowSizeSupportedArray at the given index.
     */
    @java.lang.Override
    public com.sepp89117.goeasypro_android.gopro.LiveStreaming.EnumWindowSize getLiveStreamWindowSizeSupportedArray(int index) {
      return liveStreamWindowSizeSupportedArray_converter_.convert(liveStreamWindowSizeSupportedArray_.getInt(index));
    }

    public static final int LIVE_STREAM_ENCODE_SUPPORTED_FIELD_NUMBER = 6;
    private boolean liveStreamEncodeSupported_ = false;
    /**
     * <pre>
     * Does the camera support encoding while live streaming?
     * </pre>
     *
     * <code>optional bool live_stream_encode_supported = 6;</code>
     * @return Whether the liveStreamEncodeSupported field is set.
     */
    @java.lang.Override
    public boolean hasLiveStreamEncodeSupported() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <pre>
     * Does the camera support encoding while live streaming?
     * </pre>
     *
     * <code>optional bool live_stream_encode_supported = 6;</code>
     * @return The liveStreamEncodeSupported.
     */
    @java.lang.Override
    public boolean getLiveStreamEncodeSupported() {
      return liveStreamEncodeSupported_;
    }

    public static final int LIVE_STREAM_MAX_LENS_UNSUPPORTED_FIELD_NUMBER = 7;
    private boolean liveStreamMaxLensUnsupported_ = false;
    /**
     * <pre>
     * Is the Max Lens feature NOT supported?
     * </pre>
     *
     * <code>optional bool live_stream_max_lens_unsupported = 7;</code>
     * @return Whether the liveStreamMaxLensUnsupported field is set.
     */
    @java.lang.Override
    public boolean hasLiveStreamMaxLensUnsupported() {
      return ((bitField0_ & 0x00000020) != 0);
    }
    /**
     * <pre>
     * Is the Max Lens feature NOT supported?
     * </pre>
     *
     * <code>optional bool live_stream_max_lens_unsupported = 7;</code>
     * @return The liveStreamMaxLensUnsupported.
     */
    @java.lang.Override
    public boolean getLiveStreamMaxLensUnsupported() {
      return liveStreamMaxLensUnsupported_;
    }

    public static final int LIVE_STREAM_MINIMUM_STREAM_BITRATE_FIELD_NUMBER = 8;
    private int liveStreamMinimumStreamBitrate_ = 0;
    /**
     * <pre>
     * Camera-defined minimum bitrate (static) (Kbps)
     * </pre>
     *
     * <code>optional int32 live_stream_minimum_stream_bitrate = 8;</code>
     * @return Whether the liveStreamMinimumStreamBitrate field is set.
     */
    @java.lang.Override
    public boolean hasLiveStreamMinimumStreamBitrate() {
      return ((bitField0_ & 0x00000040) != 0);
    }
    /**
     * <pre>
     * Camera-defined minimum bitrate (static) (Kbps)
     * </pre>
     *
     * <code>optional int32 live_stream_minimum_stream_bitrate = 8;</code>
     * @return The liveStreamMinimumStreamBitrate.
     */
    @java.lang.Override
    public int getLiveStreamMinimumStreamBitrate() {
      return liveStreamMinimumStreamBitrate_;
    }

    public static final int LIVE_STREAM_MAXIMUM_STREAM_BITRATE_FIELD_NUMBER = 9;
    private int liveStreamMaximumStreamBitrate_ = 0;
    /**
     * <pre>
     * Camera-defined maximum bitrate (static) (Kbps)
     * </pre>
     *
     * <code>optional int32 live_stream_maximum_stream_bitrate = 9;</code>
     * @return Whether the liveStreamMaximumStreamBitrate field is set.
     */
    @java.lang.Override
    public boolean hasLiveStreamMaximumStreamBitrate() {
      return ((bitField0_ & 0x00000080) != 0);
    }
    /**
     * <pre>
     * Camera-defined maximum bitrate (static) (Kbps)
     * </pre>
     *
     * <code>optional int32 live_stream_maximum_stream_bitrate = 9;</code>
     * @return The liveStreamMaximumStreamBitrate.
     */
    @java.lang.Override
    public int getLiveStreamMaximumStreamBitrate() {
      return liveStreamMaximumStreamBitrate_;
    }

    public static final int LIVE_STREAM_LENS_SUPPORTED_FIELD_NUMBER = 10;
    private boolean liveStreamLensSupported_ = false;
    /**
     * <pre>
     * Does camera support setting lens for live streaming?
     * </pre>
     *
     * <code>optional bool live_stream_lens_supported = 10;</code>
     * @return Whether the liveStreamLensSupported field is set.
     */
    @java.lang.Override
    public boolean hasLiveStreamLensSupported() {
      return ((bitField0_ & 0x00000100) != 0);
    }
    /**
     * <pre>
     * Does camera support setting lens for live streaming?
     * </pre>
     *
     * <code>optional bool live_stream_lens_supported = 10;</code>
     * @return The liveStreamLensSupported.
     */
    @java.lang.Override
    public boolean getLiveStreamLensSupported() {
      return liveStreamLensSupported_;
    }

    public static final int LIVE_STREAM_LENS_SUPPORTED_ARRAY_FIELD_NUMBER = 11;
    @SuppressWarnings("serial")
    private com.google.protobuf.Internal.IntList liveStreamLensSupportedArray_;
    private static final com.google.protobuf.Internal.IntListAdapter.IntConverter<
        com.sepp89117.goeasypro_android.gopro.LiveStreaming.EnumLens> liveStreamLensSupportedArray_converter_ =
            new com.google.protobuf.Internal.IntListAdapter.IntConverter<
                com.sepp89117.goeasypro_android.gopro.LiveStreaming.EnumLens>() {
              public com.sepp89117.goeasypro_android.gopro.LiveStreaming.EnumLens convert(int from) {
                com.sepp89117.goeasypro_android.gopro.LiveStreaming.EnumLens result = com.sepp89117.goeasypro_android.gopro.LiveStreaming.EnumLens.forNumber(from);
                return result == null ? com.sepp89117.goeasypro_android.gopro.LiveStreaming.EnumLens.LENS_WIDE : result;
              }
            };
    /**
     * <pre>
     * Set of currently supported FOV options
     * </pre>
     *
     * <code>repeated .com.sepp89117.goeasypro_android.gopro.EnumLens live_stream_lens_supported_array = 11;</code>
     * @return A list containing the liveStreamLensSupportedArray.
     */
    @java.lang.Override
    public java.util.List<com.sepp89117.goeasypro_android.gopro.LiveStreaming.EnumLens> getLiveStreamLensSupportedArrayList() {
      return new com.google.protobuf.Internal.IntListAdapter<
          com.sepp89117.goeasypro_android.gopro.LiveStreaming.EnumLens>(liveStreamLensSupportedArray_, liveStreamLensSupportedArray_converter_);
    }
    /**
     * <pre>
     * Set of currently supported FOV options
     * </pre>
     *
     * <code>repeated .com.sepp89117.goeasypro_android.gopro.EnumLens live_stream_lens_supported_array = 11;</code>
     * @return The count of liveStreamLensSupportedArray.
     */
    @java.lang.Override
    public int getLiveStreamLensSupportedArrayCount() {
      return liveStreamLensSupportedArray_.size();
    }
    /**
     * <pre>
     * Set of currently supported FOV options
     * </pre>
     *
     * <code>repeated .com.sepp89117.goeasypro_android.gopro.EnumLens live_stream_lens_supported_array = 11;</code>
     * @param index The index of the element to return.
     * @return The liveStreamLensSupportedArray at the given index.
     */
    @java.lang.Override
    public com.sepp89117.goeasypro_android.gopro.LiveStreaming.EnumLens getLiveStreamLensSupportedArray(int index) {
      return liveStreamLensSupportedArray_converter_.convert(liveStreamLensSupportedArray_.getInt(index));
    }

    public static final int LIVE_STREAM_PROTUNE_SUPPORTED_FIELD_NUMBER = 13;
    private boolean liveStreamProtuneSupported_ = false;
    /**
     * <pre>
     * Does the camera support live stream protune settings
     * </pre>
     *
     * <code>optional bool live_stream_protune_supported = 13;</code>
     * @return Whether the liveStreamProtuneSupported field is set.
     */
    @java.lang.Override
    public boolean hasLiveStreamProtuneSupported() {
      return ((bitField0_ & 0x00000200) != 0);
    }
    /**
     * <pre>
     * Does the camera support live stream protune settings
     * </pre>
     *
     * <code>optional bool live_stream_protune_supported = 13;</code>
     * @return The liveStreamProtuneSupported.
     */
    @java.lang.Override
    public boolean getLiveStreamProtuneSupported() {
      return liveStreamProtuneSupported_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeEnum(1, liveStreamStatus_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeEnum(2, liveStreamError_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        output.writeBool(3, liveStreamEncode_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        output.writeInt32(4, liveStreamBitrate_);
      }
      for (int i = 0; i < liveStreamWindowSizeSupportedArray_.size(); i++) {
        output.writeEnum(5, liveStreamWindowSizeSupportedArray_.getInt(i));
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        output.writeBool(6, liveStreamEncodeSupported_);
      }
      if (((bitField0_ & 0x00000020) != 0)) {
        output.writeBool(7, liveStreamMaxLensUnsupported_);
      }
      if (((bitField0_ & 0x00000040) != 0)) {
        output.writeInt32(8, liveStreamMinimumStreamBitrate_);
      }
      if (((bitField0_ & 0x00000080) != 0)) {
        output.writeInt32(9, liveStreamMaximumStreamBitrate_);
      }
      if (((bitField0_ & 0x00000100) != 0)) {
        output.writeBool(10, liveStreamLensSupported_);
      }
      for (int i = 0; i < liveStreamLensSupportedArray_.size(); i++) {
        output.writeEnum(11, liveStreamLensSupportedArray_.getInt(i));
      }
      if (((bitField0_ & 0x00000200) != 0)) {
        output.writeBool(13, liveStreamProtuneSupported_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, liveStreamStatus_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(2, liveStreamError_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(3, liveStreamEncode_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, liveStreamBitrate_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < liveStreamWindowSizeSupportedArray_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeEnumSizeNoTag(liveStreamWindowSizeSupportedArray_.getInt(i));
        }
        size += dataSize;
        size += 1 * liveStreamWindowSizeSupportedArray_.size();
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(6, liveStreamEncodeSupported_);
      }
      if (((bitField0_ & 0x00000020) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(7, liveStreamMaxLensUnsupported_);
      }
      if (((bitField0_ & 0x00000040) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(8, liveStreamMinimumStreamBitrate_);
      }
      if (((bitField0_ & 0x00000080) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(9, liveStreamMaximumStreamBitrate_);
      }
      if (((bitField0_ & 0x00000100) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(10, liveStreamLensSupported_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < liveStreamLensSupportedArray_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeEnumSizeNoTag(liveStreamLensSupportedArray_.getInt(i));
        }
        size += dataSize;
        size += 1 * liveStreamLensSupportedArray_.size();
      }
      if (((bitField0_ & 0x00000200) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(13, liveStreamProtuneSupported_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.sepp89117.goeasypro_android.gopro.LiveStreaming.NotifyLiveStreamStatus)) {
        return super.equals(obj);
      }
      com.sepp89117.goeasypro_android.gopro.LiveStreaming.NotifyLiveStreamStatus other = (com.sepp89117.goeasypro_android.gopro.LiveStreaming.NotifyLiveStreamStatus) obj;

      if (hasLiveStreamStatus() != other.hasLiveStreamStatus()) return false;
      if (hasLiveStreamStatus()) {
        if (liveStreamStatus_ != other.liveStreamStatus_) return false;
      }
      if (hasLiveStreamError() != other.hasLiveStreamError()) return false;
      if (hasLiveStreamError()) {
        if (liveStreamError_ != other.liveStreamError_) return false;
      }
      if (hasLiveStreamEncode() != other.hasLiveStreamEncode()) return false;
      if (hasLiveStreamEncode()) {
        if (getLiveStreamEncode()
            != other.getLiveStreamEncode()) return false;
      }
      if (hasLiveStreamBitrate() != other.hasLiveStreamBitrate()) return false;
      if (hasLiveStreamBitrate()) {
        if (getLiveStreamBitrate()
            != other.getLiveStreamBitrate()) return false;
      }
      if (!liveStreamWindowSizeSupportedArray_.equals(other.liveStreamWindowSizeSupportedArray_)) return false;
      if (hasLiveStreamEncodeSupported() != other.hasLiveStreamEncodeSupported()) return false;
      if (hasLiveStreamEncodeSupported()) {
        if (getLiveStreamEncodeSupported()
            != other.getLiveStreamEncodeSupported()) return false;
      }
      if (hasLiveStreamMaxLensUnsupported() != other.hasLiveStreamMaxLensUnsupported()) return false;
      if (hasLiveStreamMaxLensUnsupported()) {
        if (getLiveStreamMaxLensUnsupported()
            != other.getLiveStreamMaxLensUnsupported()) return false;
      }
      if (hasLiveStreamMinimumStreamBitrate() != other.hasLiveStreamMinimumStreamBitrate()) return false;
      if (hasLiveStreamMinimumStreamBitrate()) {
        if (getLiveStreamMinimumStreamBitrate()
            != other.getLiveStreamMinimumStreamBitrate()) return false;
      }
      if (hasLiveStreamMaximumStreamBitrate() != other.hasLiveStreamMaximumStreamBitrate()) return false;
      if (hasLiveStreamMaximumStreamBitrate()) {
        if (getLiveStreamMaximumStreamBitrate()
            != other.getLiveStreamMaximumStreamBitrate()) return false;
      }
      if (hasLiveStreamLensSupported() != other.hasLiveStreamLensSupported()) return false;
      if (hasLiveStreamLensSupported()) {
        if (getLiveStreamLensSupported()
            != other.getLiveStreamLensSupported()) return false;
      }
      if (!liveStreamLensSupportedArray_.equals(other.liveStreamLensSupportedArray_)) return false;
      if (hasLiveStreamProtuneSupported() != other.hasLiveStreamProtuneSupported()) return false;
      if (hasLiveStreamProtuneSupported()) {
        if (getLiveStreamProtuneSupported()
            != other.getLiveStreamProtuneSupported()) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasLiveStreamStatus()) {
        hash = (37 * hash) + LIVE_STREAM_STATUS_FIELD_NUMBER;
        hash = (53 * hash) + liveStreamStatus_;
      }
      if (hasLiveStreamError()) {
        hash = (37 * hash) + LIVE_STREAM_ERROR_FIELD_NUMBER;
        hash = (53 * hash) + liveStreamError_;
      }
      if (hasLiveStreamEncode()) {
        hash = (37 * hash) + LIVE_STREAM_ENCODE_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getLiveStreamEncode());
      }
      if (hasLiveStreamBitrate()) {
        hash = (37 * hash) + LIVE_STREAM_BITRATE_FIELD_NUMBER;
        hash = (53 * hash) + getLiveStreamBitrate();
      }
      if (getLiveStreamWindowSizeSupportedArrayCount() > 0) {
        hash = (37 * hash) + LIVE_STREAM_WINDOW_SIZE_SUPPORTED_ARRAY_FIELD_NUMBER;
        hash = (53 * hash) + liveStreamWindowSizeSupportedArray_.hashCode();
      }
      if (hasLiveStreamEncodeSupported()) {
        hash = (37 * hash) + LIVE_STREAM_ENCODE_SUPPORTED_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getLiveStreamEncodeSupported());
      }
      if (hasLiveStreamMaxLensUnsupported()) {
        hash = (37 * hash) + LIVE_STREAM_MAX_LENS_UNSUPPORTED_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getLiveStreamMaxLensUnsupported());
      }
      if (hasLiveStreamMinimumStreamBitrate()) {
        hash = (37 * hash) + LIVE_STREAM_MINIMUM_STREAM_BITRATE_FIELD_NUMBER;
        hash = (53 * hash) + getLiveStreamMinimumStreamBitrate();
      }
      if (hasLiveStreamMaximumStreamBitrate()) {
        hash = (37 * hash) + LIVE_STREAM_MAXIMUM_STREAM_BITRATE_FIELD_NUMBER;
        hash = (53 * hash) + getLiveStreamMaximumStreamBitrate();
      }
      if (hasLiveStreamLensSupported()) {
        hash = (37 * hash) + LIVE_STREAM_LENS_SUPPORTED_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getLiveStreamLensSupported());
      }
      if (getLiveStreamLensSupportedArrayCount() > 0) {
        hash = (37 * hash) + LIVE_STREAM_LENS_SUPPORTED_ARRAY_FIELD_NUMBER;
        hash = (53 * hash) + liveStreamLensSupportedArray_.hashCode();
      }
      if (hasLiveStreamProtuneSupported()) {
        hash = (37 * hash) + LIVE_STREAM_PROTUNE_SUPPORTED_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getLiveStreamProtuneSupported());
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.sepp89117.goeasypro_android.gopro.LiveStreaming.NotifyLiveStreamStatus parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sepp89117.goeasypro_android.gopro.LiveStreaming.NotifyLiveStreamStatus parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sepp89117.goeasypro_android.gopro.LiveStreaming.NotifyLiveStreamStatus parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sepp89117.goeasypro_android.gopro.LiveStreaming.NotifyLiveStreamStatus parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sepp89117.goeasypro_android.gopro.LiveStreaming.NotifyLiveStreamStatus parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sepp89117.goeasypro_android.gopro.LiveStreaming.NotifyLiveStreamStatus parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sepp89117.goeasypro_android.gopro.LiveStreaming.NotifyLiveStreamStatus parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static com.sepp89117.goeasypro_android.gopro.LiveStreaming.NotifyLiveStreamStatus parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static com.sepp89117.goeasypro_android.gopro.LiveStreaming.NotifyLiveStreamStatus parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static com.sepp89117.goeasypro_android.gopro.LiveStreaming.NotifyLiveStreamStatus parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.sepp89117.goeasypro_android.gopro.LiveStreaming.NotifyLiveStreamStatus parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static com.sepp89117.goeasypro_android.gopro.LiveStreaming.NotifyLiveStreamStatus parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.sepp89117.goeasypro_android.gopro.LiveStreaming.NotifyLiveStreamStatus prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * *
     * Live Stream status
     *
     * Sent either:
     *
     * - As a synchronous response to initial &#64;ref RequestGetLiveStreamStatus
     * - As an asynchronous notifications registered for via &#64;ref RequestGetLiveStreamStatus
     * </pre>
     *
     * Protobuf type {@code com.sepp89117.goeasypro_android.gopro.NotifyLiveStreamStatus}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:com.sepp89117.goeasypro_android.gopro.NotifyLiveStreamStatus)
        com.sepp89117.goeasypro_android.gopro.LiveStreaming.NotifyLiveStreamStatusOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.sepp89117.goeasypro_android.gopro.LiveStreaming.internal_static_com_sepp89117_goeasypro_android_gopro_NotifyLiveStreamStatus_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.sepp89117.goeasypro_android.gopro.LiveStreaming.internal_static_com_sepp89117_goeasypro_android_gopro_NotifyLiveStreamStatus_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.sepp89117.goeasypro_android.gopro.LiveStreaming.NotifyLiveStreamStatus.class, com.sepp89117.goeasypro_android.gopro.LiveStreaming.NotifyLiveStreamStatus.Builder.class);
      }

      // Construct using com.sepp89117.goeasypro_android.gopro.LiveStreaming.NotifyLiveStreamStatus.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        liveStreamStatus_ = 0;
        liveStreamError_ = 0;
        liveStreamEncode_ = false;
        liveStreamBitrate_ = 0;
        liveStreamWindowSizeSupportedArray_ = emptyIntList();
        bitField0_ = (bitField0_ & ~0x00000010);
        liveStreamEncodeSupported_ = false;
        liveStreamMaxLensUnsupported_ = false;
        liveStreamMinimumStreamBitrate_ = 0;
        liveStreamMaximumStreamBitrate_ = 0;
        liveStreamLensSupported_ = false;
        liveStreamLensSupportedArray_ = emptyIntList();
        bitField0_ = (bitField0_ & ~0x00000400);
        liveStreamProtuneSupported_ = false;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.sepp89117.goeasypro_android.gopro.LiveStreaming.internal_static_com_sepp89117_goeasypro_android_gopro_NotifyLiveStreamStatus_descriptor;
      }

      @java.lang.Override
      public com.sepp89117.goeasypro_android.gopro.LiveStreaming.NotifyLiveStreamStatus getDefaultInstanceForType() {
        return com.sepp89117.goeasypro_android.gopro.LiveStreaming.NotifyLiveStreamStatus.getDefaultInstance();
      }

      @java.lang.Override
      public com.sepp89117.goeasypro_android.gopro.LiveStreaming.NotifyLiveStreamStatus build() {
        com.sepp89117.goeasypro_android.gopro.LiveStreaming.NotifyLiveStreamStatus result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.sepp89117.goeasypro_android.gopro.LiveStreaming.NotifyLiveStreamStatus buildPartial() {
        com.sepp89117.goeasypro_android.gopro.LiveStreaming.NotifyLiveStreamStatus result = new com.sepp89117.goeasypro_android.gopro.LiveStreaming.NotifyLiveStreamStatus(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(com.sepp89117.goeasypro_android.gopro.LiveStreaming.NotifyLiveStreamStatus result) {
        if (((bitField0_ & 0x00000010) != 0)) {
          liveStreamWindowSizeSupportedArray_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x00000010);
        }
        result.liveStreamWindowSizeSupportedArray_ = liveStreamWindowSizeSupportedArray_;
        if (((bitField0_ & 0x00000400) != 0)) {
          liveStreamLensSupportedArray_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x00000400);
        }
        result.liveStreamLensSupportedArray_ = liveStreamLensSupportedArray_;
      }

      private void buildPartial0(com.sepp89117.goeasypro_android.gopro.LiveStreaming.NotifyLiveStreamStatus result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.liveStreamStatus_ = liveStreamStatus_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.liveStreamError_ = liveStreamError_;
          to_bitField0_ |= 0x00000002;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.liveStreamEncode_ = liveStreamEncode_;
          to_bitField0_ |= 0x00000004;
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.liveStreamBitrate_ = liveStreamBitrate_;
          to_bitField0_ |= 0x00000008;
        }
        if (((from_bitField0_ & 0x00000020) != 0)) {
          result.liveStreamEncodeSupported_ = liveStreamEncodeSupported_;
          to_bitField0_ |= 0x00000010;
        }
        if (((from_bitField0_ & 0x00000040) != 0)) {
          result.liveStreamMaxLensUnsupported_ = liveStreamMaxLensUnsupported_;
          to_bitField0_ |= 0x00000020;
        }
        if (((from_bitField0_ & 0x00000080) != 0)) {
          result.liveStreamMinimumStreamBitrate_ = liveStreamMinimumStreamBitrate_;
          to_bitField0_ |= 0x00000040;
        }
        if (((from_bitField0_ & 0x00000100) != 0)) {
          result.liveStreamMaximumStreamBitrate_ = liveStreamMaximumStreamBitrate_;
          to_bitField0_ |= 0x00000080;
        }
        if (((from_bitField0_ & 0x00000200) != 0)) {
          result.liveStreamLensSupported_ = liveStreamLensSupported_;
          to_bitField0_ |= 0x00000100;
        }
        if (((from_bitField0_ & 0x00000800) != 0)) {
          result.liveStreamProtuneSupported_ = liveStreamProtuneSupported_;
          to_bitField0_ |= 0x00000200;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.sepp89117.goeasypro_android.gopro.LiveStreaming.NotifyLiveStreamStatus) {
          return mergeFrom((com.sepp89117.goeasypro_android.gopro.LiveStreaming.NotifyLiveStreamStatus)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.sepp89117.goeasypro_android.gopro.LiveStreaming.NotifyLiveStreamStatus other) {
        if (other == com.sepp89117.goeasypro_android.gopro.LiveStreaming.NotifyLiveStreamStatus.getDefaultInstance()) return this;
        if (other.hasLiveStreamStatus()) {
          setLiveStreamStatus(other.getLiveStreamStatus());
        }
        if (other.hasLiveStreamError()) {
          setLiveStreamError(other.getLiveStreamError());
        }
        if (other.hasLiveStreamEncode()) {
          setLiveStreamEncode(other.getLiveStreamEncode());
        }
        if (other.hasLiveStreamBitrate()) {
          setLiveStreamBitrate(other.getLiveStreamBitrate());
        }
        if (!other.liveStreamWindowSizeSupportedArray_.isEmpty()) {
          if (liveStreamWindowSizeSupportedArray_.isEmpty()) {
            liveStreamWindowSizeSupportedArray_ = other.liveStreamWindowSizeSupportedArray_;
            bitField0_ = (bitField0_ & ~0x00000010);
          } else {
            ensureLiveStreamWindowSizeSupportedArrayIsMutable();
            liveStreamWindowSizeSupportedArray_.addAll(other.liveStreamWindowSizeSupportedArray_);
          }
          onChanged();
        }
        if (other.hasLiveStreamEncodeSupported()) {
          setLiveStreamEncodeSupported(other.getLiveStreamEncodeSupported());
        }
        if (other.hasLiveStreamMaxLensUnsupported()) {
          setLiveStreamMaxLensUnsupported(other.getLiveStreamMaxLensUnsupported());
        }
        if (other.hasLiveStreamMinimumStreamBitrate()) {
          setLiveStreamMinimumStreamBitrate(other.getLiveStreamMinimumStreamBitrate());
        }
        if (other.hasLiveStreamMaximumStreamBitrate()) {
          setLiveStreamMaximumStreamBitrate(other.getLiveStreamMaximumStreamBitrate());
        }
        if (other.hasLiveStreamLensSupported()) {
          setLiveStreamLensSupported(other.getLiveStreamLensSupported());
        }
        if (!other.liveStreamLensSupportedArray_.isEmpty()) {
          if (liveStreamLensSupportedArray_.isEmpty()) {
            liveStreamLensSupportedArray_ = other.liveStreamLensSupportedArray_;
            bitField0_ = (bitField0_ & ~0x00000400);
          } else {
            ensureLiveStreamLensSupportedArrayIsMutable();
            liveStreamLensSupportedArray_.addAll(other.liveStreamLensSupportedArray_);
          }
          onChanged();
        }
        if (other.hasLiveStreamProtuneSupported()) {
          setLiveStreamProtuneSupported(other.getLiveStreamProtuneSupported());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                int tmpRaw = input.readEnum();
                com.sepp89117.goeasypro_android.gopro.LiveStreaming.EnumLiveStreamStatus tmpValue =
                    com.sepp89117.goeasypro_android.gopro.LiveStreaming.EnumLiveStreamStatus.forNumber(tmpRaw);
                if (tmpValue == null) {
                  mergeUnknownVarintField(1, tmpRaw);
                } else {
                  liveStreamStatus_ = tmpRaw;
                  bitField0_ |= 0x00000001;
                }
                break;
              } // case 8
              case 16: {
                int tmpRaw = input.readEnum();
                com.sepp89117.goeasypro_android.gopro.LiveStreaming.EnumLiveStreamError tmpValue =
                    com.sepp89117.goeasypro_android.gopro.LiveStreaming.EnumLiveStreamError.forNumber(tmpRaw);
                if (tmpValue == null) {
                  mergeUnknownVarintField(2, tmpRaw);
                } else {
                  liveStreamError_ = tmpRaw;
                  bitField0_ |= 0x00000002;
                }
                break;
              } // case 16
              case 24: {
                liveStreamEncode_ = input.readBool();
                bitField0_ |= 0x00000004;
                break;
              } // case 24
              case 32: {
                liveStreamBitrate_ = input.readInt32();
                bitField0_ |= 0x00000008;
                break;
              } // case 32
              case 40: {
                int tmpRaw = input.readEnum();
                com.sepp89117.goeasypro_android.gopro.LiveStreaming.EnumWindowSize tmpValue =
                    com.sepp89117.goeasypro_android.gopro.LiveStreaming.EnumWindowSize.forNumber(tmpRaw);
                if (tmpValue == null) {
                  mergeUnknownVarintField(5, tmpRaw);
                } else {
                  ensureLiveStreamWindowSizeSupportedArrayIsMutable();
                  liveStreamWindowSizeSupportedArray_.addInt(tmpRaw);
                }
                break;
              } // case 40
              case 42: {
                int length = input.readRawVarint32();
                int oldLimit = input.pushLimit(length);
                while(input.getBytesUntilLimit() > 0) {
                  int tmpRaw = input.readEnum();
                  com.sepp89117.goeasypro_android.gopro.LiveStreaming.EnumWindowSize tmpValue =
                      com.sepp89117.goeasypro_android.gopro.LiveStreaming.EnumWindowSize.forNumber(tmpRaw);
                  if (tmpValue == null) {
                    mergeUnknownVarintField(5, tmpRaw);
                  } else {
                    ensureLiveStreamWindowSizeSupportedArrayIsMutable();
                    liveStreamWindowSizeSupportedArray_.addInt(tmpRaw);
                  }
                }
                input.popLimit(oldLimit);
                break;
              } // case 42
              case 48: {
                liveStreamEncodeSupported_ = input.readBool();
                bitField0_ |= 0x00000020;
                break;
              } // case 48
              case 56: {
                liveStreamMaxLensUnsupported_ = input.readBool();
                bitField0_ |= 0x00000040;
                break;
              } // case 56
              case 64: {
                liveStreamMinimumStreamBitrate_ = input.readInt32();
                bitField0_ |= 0x00000080;
                break;
              } // case 64
              case 72: {
                liveStreamMaximumStreamBitrate_ = input.readInt32();
                bitField0_ |= 0x00000100;
                break;
              } // case 72
              case 80: {
                liveStreamLensSupported_ = input.readBool();
                bitField0_ |= 0x00000200;
                break;
              } // case 80
              case 88: {
                int tmpRaw = input.readEnum();
                com.sepp89117.goeasypro_android.gopro.LiveStreaming.EnumLens tmpValue =
                    com.sepp89117.goeasypro_android.gopro.LiveStreaming.EnumLens.forNumber(tmpRaw);
                if (tmpValue == null) {
                  mergeUnknownVarintField(11, tmpRaw);
                } else {
                  ensureLiveStreamLensSupportedArrayIsMutable();
                  liveStreamLensSupportedArray_.addInt(tmpRaw);
                }
                break;
              } // case 88
              case 90: {
                int length = input.readRawVarint32();
                int oldLimit = input.pushLimit(length);
                while(input.getBytesUntilLimit() > 0) {
                  int tmpRaw = input.readEnum();
                  com.sepp89117.goeasypro_android.gopro.LiveStreaming.EnumLens tmpValue =
                      com.sepp89117.goeasypro_android.gopro.LiveStreaming.EnumLens.forNumber(tmpRaw);
                  if (tmpValue == null) {
                    mergeUnknownVarintField(11, tmpRaw);
                  } else {
                    ensureLiveStreamLensSupportedArrayIsMutable();
                    liveStreamLensSupportedArray_.addInt(tmpRaw);
                  }
                }
                input.popLimit(oldLimit);
                break;
              } // case 90
              case 104: {
                liveStreamProtuneSupported_ = input.readBool();
                bitField0_ |= 0x00000800;
                break;
              } // case 104
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private int liveStreamStatus_ = 0;
      /**
       * <pre>
       * Live stream status
       * </pre>
       *
       * <code>optional .com.sepp89117.goeasypro_android.gopro.EnumLiveStreamStatus live_stream_status = 1;</code>
       * @return Whether the liveStreamStatus field is set.
       */
      @java.lang.Override public boolean hasLiveStreamStatus() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * Live stream status
       * </pre>
       *
       * <code>optional .com.sepp89117.goeasypro_android.gopro.EnumLiveStreamStatus live_stream_status = 1;</code>
       * @return The liveStreamStatus.
       */
      @java.lang.Override
      public com.sepp89117.goeasypro_android.gopro.LiveStreaming.EnumLiveStreamStatus getLiveStreamStatus() {
        com.sepp89117.goeasypro_android.gopro.LiveStreaming.EnumLiveStreamStatus result = com.sepp89117.goeasypro_android.gopro.LiveStreaming.EnumLiveStreamStatus.forNumber(liveStreamStatus_);
        return result == null ? com.sepp89117.goeasypro_android.gopro.LiveStreaming.EnumLiveStreamStatus.LIVE_STREAM_STATE_IDLE : result;
      }
      /**
       * <pre>
       * Live stream status
       * </pre>
       *
       * <code>optional .com.sepp89117.goeasypro_android.gopro.EnumLiveStreamStatus live_stream_status = 1;</code>
       * @param value The liveStreamStatus to set.
       * @return This builder for chaining.
       */
      public Builder setLiveStreamStatus(com.sepp89117.goeasypro_android.gopro.LiveStreaming.EnumLiveStreamStatus value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        liveStreamStatus_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Live stream status
       * </pre>
       *
       * <code>optional .com.sepp89117.goeasypro_android.gopro.EnumLiveStreamStatus live_stream_status = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearLiveStreamStatus() {
        bitField0_ = (bitField0_ & ~0x00000001);
        liveStreamStatus_ = 0;
        onChanged();
        return this;
      }

      private int liveStreamError_ = 0;
      /**
       * <pre>
       * Live stream error
       * </pre>
       *
       * <code>optional .com.sepp89117.goeasypro_android.gopro.EnumLiveStreamError live_stream_error = 2;</code>
       * @return Whether the liveStreamError field is set.
       */
      @java.lang.Override public boolean hasLiveStreamError() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * Live stream error
       * </pre>
       *
       * <code>optional .com.sepp89117.goeasypro_android.gopro.EnumLiveStreamError live_stream_error = 2;</code>
       * @return The liveStreamError.
       */
      @java.lang.Override
      public com.sepp89117.goeasypro_android.gopro.LiveStreaming.EnumLiveStreamError getLiveStreamError() {
        com.sepp89117.goeasypro_android.gopro.LiveStreaming.EnumLiveStreamError result = com.sepp89117.goeasypro_android.gopro.LiveStreaming.EnumLiveStreamError.forNumber(liveStreamError_);
        return result == null ? com.sepp89117.goeasypro_android.gopro.LiveStreaming.EnumLiveStreamError.LIVE_STREAM_ERROR_NONE : result;
      }
      /**
       * <pre>
       * Live stream error
       * </pre>
       *
       * <code>optional .com.sepp89117.goeasypro_android.gopro.EnumLiveStreamError live_stream_error = 2;</code>
       * @param value The liveStreamError to set.
       * @return This builder for chaining.
       */
      public Builder setLiveStreamError(com.sepp89117.goeasypro_android.gopro.LiveStreaming.EnumLiveStreamError value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000002;
        liveStreamError_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Live stream error
       * </pre>
       *
       * <code>optional .com.sepp89117.goeasypro_android.gopro.EnumLiveStreamError live_stream_error = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearLiveStreamError() {
        bitField0_ = (bitField0_ & ~0x00000002);
        liveStreamError_ = 0;
        onChanged();
        return this;
      }

      private boolean liveStreamEncode_ ;
      /**
       * <pre>
       * Is live stream encoding?
       * </pre>
       *
       * <code>optional bool live_stream_encode = 3;</code>
       * @return Whether the liveStreamEncode field is set.
       */
      @java.lang.Override
      public boolean hasLiveStreamEncode() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <pre>
       * Is live stream encoding?
       * </pre>
       *
       * <code>optional bool live_stream_encode = 3;</code>
       * @return The liveStreamEncode.
       */
      @java.lang.Override
      public boolean getLiveStreamEncode() {
        return liveStreamEncode_;
      }
      /**
       * <pre>
       * Is live stream encoding?
       * </pre>
       *
       * <code>optional bool live_stream_encode = 3;</code>
       * @param value The liveStreamEncode to set.
       * @return This builder for chaining.
       */
      public Builder setLiveStreamEncode(boolean value) {

        liveStreamEncode_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Is live stream encoding?
       * </pre>
       *
       * <code>optional bool live_stream_encode = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearLiveStreamEncode() {
        bitField0_ = (bitField0_ & ~0x00000004);
        liveStreamEncode_ = false;
        onChanged();
        return this;
      }

      private int liveStreamBitrate_ ;
      /**
       * <pre>
       * Live stream bitrate (Kbps)
       * </pre>
       *
       * <code>optional int32 live_stream_bitrate = 4;</code>
       * @return Whether the liveStreamBitrate field is set.
       */
      @java.lang.Override
      public boolean hasLiveStreamBitrate() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <pre>
       * Live stream bitrate (Kbps)
       * </pre>
       *
       * <code>optional int32 live_stream_bitrate = 4;</code>
       * @return The liveStreamBitrate.
       */
      @java.lang.Override
      public int getLiveStreamBitrate() {
        return liveStreamBitrate_;
      }
      /**
       * <pre>
       * Live stream bitrate (Kbps)
       * </pre>
       *
       * <code>optional int32 live_stream_bitrate = 4;</code>
       * @param value The liveStreamBitrate to set.
       * @return This builder for chaining.
       */
      public Builder setLiveStreamBitrate(int value) {

        liveStreamBitrate_ = value;
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Live stream bitrate (Kbps)
       * </pre>
       *
       * <code>optional int32 live_stream_bitrate = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearLiveStreamBitrate() {
        bitField0_ = (bitField0_ & ~0x00000008);
        liveStreamBitrate_ = 0;
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.IntList liveStreamWindowSizeSupportedArray_ =
        emptyIntList();
      private void ensureLiveStreamWindowSizeSupportedArrayIsMutable() {
        if (!((bitField0_ & 0x00000010) != 0)) {
          liveStreamWindowSizeSupportedArray_ = makeMutableCopy(liveStreamWindowSizeSupportedArray_);
          bitField0_ |= 0x00000010;
        }
      }
      /**
       * <pre>
       * Set of currently supported resolutions
       * </pre>
       *
       * <code>repeated .com.sepp89117.goeasypro_android.gopro.EnumWindowSize live_stream_window_size_supported_array = 5;</code>
       * @return A list containing the liveStreamWindowSizeSupportedArray.
       */
      public java.util.List<com.sepp89117.goeasypro_android.gopro.LiveStreaming.EnumWindowSize> getLiveStreamWindowSizeSupportedArrayList() {
        return new com.google.protobuf.Internal.IntListAdapter<
            com.sepp89117.goeasypro_android.gopro.LiveStreaming.EnumWindowSize>(liveStreamWindowSizeSupportedArray_, liveStreamWindowSizeSupportedArray_converter_);
      }
      /**
       * <pre>
       * Set of currently supported resolutions
       * </pre>
       *
       * <code>repeated .com.sepp89117.goeasypro_android.gopro.EnumWindowSize live_stream_window_size_supported_array = 5;</code>
       * @return The count of liveStreamWindowSizeSupportedArray.
       */
      public int getLiveStreamWindowSizeSupportedArrayCount() {
        return liveStreamWindowSizeSupportedArray_.size();
      }
      /**
       * <pre>
       * Set of currently supported resolutions
       * </pre>
       *
       * <code>repeated .com.sepp89117.goeasypro_android.gopro.EnumWindowSize live_stream_window_size_supported_array = 5;</code>
       * @param index The index of the element to return.
       * @return The liveStreamWindowSizeSupportedArray at the given index.
       */
      public com.sepp89117.goeasypro_android.gopro.LiveStreaming.EnumWindowSize getLiveStreamWindowSizeSupportedArray(int index) {
        return liveStreamWindowSizeSupportedArray_converter_.convert(liveStreamWindowSizeSupportedArray_.getInt(index));
      }
      /**
       * <pre>
       * Set of currently supported resolutions
       * </pre>
       *
       * <code>repeated .com.sepp89117.goeasypro_android.gopro.EnumWindowSize live_stream_window_size_supported_array = 5;</code>
       * @param index The index to set the value at.
       * @param value The liveStreamWindowSizeSupportedArray to set.
       * @return This builder for chaining.
       */
      public Builder setLiveStreamWindowSizeSupportedArray(
          int index, com.sepp89117.goeasypro_android.gopro.LiveStreaming.EnumWindowSize value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureLiveStreamWindowSizeSupportedArrayIsMutable();
        liveStreamWindowSizeSupportedArray_.setInt(index, value.getNumber());
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Set of currently supported resolutions
       * </pre>
       *
       * <code>repeated .com.sepp89117.goeasypro_android.gopro.EnumWindowSize live_stream_window_size_supported_array = 5;</code>
       * @param value The liveStreamWindowSizeSupportedArray to add.
       * @return This builder for chaining.
       */
      public Builder addLiveStreamWindowSizeSupportedArray(com.sepp89117.goeasypro_android.gopro.LiveStreaming.EnumWindowSize value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureLiveStreamWindowSizeSupportedArrayIsMutable();
        liveStreamWindowSizeSupportedArray_.addInt(value.getNumber());
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Set of currently supported resolutions
       * </pre>
       *
       * <code>repeated .com.sepp89117.goeasypro_android.gopro.EnumWindowSize live_stream_window_size_supported_array = 5;</code>
       * @param values The liveStreamWindowSizeSupportedArray to add.
       * @return This builder for chaining.
       */
      public Builder addAllLiveStreamWindowSizeSupportedArray(
          java.lang.Iterable<? extends com.sepp89117.goeasypro_android.gopro.LiveStreaming.EnumWindowSize> values) {
        ensureLiveStreamWindowSizeSupportedArrayIsMutable();
        for (com.sepp89117.goeasypro_android.gopro.LiveStreaming.EnumWindowSize value : values) {
          liveStreamWindowSizeSupportedArray_.addInt(value.getNumber());
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Set of currently supported resolutions
       * </pre>
       *
       * <code>repeated .com.sepp89117.goeasypro_android.gopro.EnumWindowSize live_stream_window_size_supported_array = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearLiveStreamWindowSizeSupportedArray() {
        liveStreamWindowSizeSupportedArray_ = emptyIntList();
        bitField0_ = (bitField0_ & ~0x00000010);
        onChanged();
        return this;
      }

      private boolean liveStreamEncodeSupported_ ;
      /**
       * <pre>
       * Does the camera support encoding while live streaming?
       * </pre>
       *
       * <code>optional bool live_stream_encode_supported = 6;</code>
       * @return Whether the liveStreamEncodeSupported field is set.
       */
      @java.lang.Override
      public boolean hasLiveStreamEncodeSupported() {
        return ((bitField0_ & 0x00000020) != 0);
      }
      /**
       * <pre>
       * Does the camera support encoding while live streaming?
       * </pre>
       *
       * <code>optional bool live_stream_encode_supported = 6;</code>
       * @return The liveStreamEncodeSupported.
       */
      @java.lang.Override
      public boolean getLiveStreamEncodeSupported() {
        return liveStreamEncodeSupported_;
      }
      /**
       * <pre>
       * Does the camera support encoding while live streaming?
       * </pre>
       *
       * <code>optional bool live_stream_encode_supported = 6;</code>
       * @param value The liveStreamEncodeSupported to set.
       * @return This builder for chaining.
       */
      public Builder setLiveStreamEncodeSupported(boolean value) {

        liveStreamEncodeSupported_ = value;
        bitField0_ |= 0x00000020;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Does the camera support encoding while live streaming?
       * </pre>
       *
       * <code>optional bool live_stream_encode_supported = 6;</code>
       * @return This builder for chaining.
       */
      public Builder clearLiveStreamEncodeSupported() {
        bitField0_ = (bitField0_ & ~0x00000020);
        liveStreamEncodeSupported_ = false;
        onChanged();
        return this;
      }

      private boolean liveStreamMaxLensUnsupported_ ;
      /**
       * <pre>
       * Is the Max Lens feature NOT supported?
       * </pre>
       *
       * <code>optional bool live_stream_max_lens_unsupported = 7;</code>
       * @return Whether the liveStreamMaxLensUnsupported field is set.
       */
      @java.lang.Override
      public boolean hasLiveStreamMaxLensUnsupported() {
        return ((bitField0_ & 0x00000040) != 0);
      }
      /**
       * <pre>
       * Is the Max Lens feature NOT supported?
       * </pre>
       *
       * <code>optional bool live_stream_max_lens_unsupported = 7;</code>
       * @return The liveStreamMaxLensUnsupported.
       */
      @java.lang.Override
      public boolean getLiveStreamMaxLensUnsupported() {
        return liveStreamMaxLensUnsupported_;
      }
      /**
       * <pre>
       * Is the Max Lens feature NOT supported?
       * </pre>
       *
       * <code>optional bool live_stream_max_lens_unsupported = 7;</code>
       * @param value The liveStreamMaxLensUnsupported to set.
       * @return This builder for chaining.
       */
      public Builder setLiveStreamMaxLensUnsupported(boolean value) {

        liveStreamMaxLensUnsupported_ = value;
        bitField0_ |= 0x00000040;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Is the Max Lens feature NOT supported?
       * </pre>
       *
       * <code>optional bool live_stream_max_lens_unsupported = 7;</code>
       * @return This builder for chaining.
       */
      public Builder clearLiveStreamMaxLensUnsupported() {
        bitField0_ = (bitField0_ & ~0x00000040);
        liveStreamMaxLensUnsupported_ = false;
        onChanged();
        return this;
      }

      private int liveStreamMinimumStreamBitrate_ ;
      /**
       * <pre>
       * Camera-defined minimum bitrate (static) (Kbps)
       * </pre>
       *
       * <code>optional int32 live_stream_minimum_stream_bitrate = 8;</code>
       * @return Whether the liveStreamMinimumStreamBitrate field is set.
       */
      @java.lang.Override
      public boolean hasLiveStreamMinimumStreamBitrate() {
        return ((bitField0_ & 0x00000080) != 0);
      }
      /**
       * <pre>
       * Camera-defined minimum bitrate (static) (Kbps)
       * </pre>
       *
       * <code>optional int32 live_stream_minimum_stream_bitrate = 8;</code>
       * @return The liveStreamMinimumStreamBitrate.
       */
      @java.lang.Override
      public int getLiveStreamMinimumStreamBitrate() {
        return liveStreamMinimumStreamBitrate_;
      }
      /**
       * <pre>
       * Camera-defined minimum bitrate (static) (Kbps)
       * </pre>
       *
       * <code>optional int32 live_stream_minimum_stream_bitrate = 8;</code>
       * @param value The liveStreamMinimumStreamBitrate to set.
       * @return This builder for chaining.
       */
      public Builder setLiveStreamMinimumStreamBitrate(int value) {

        liveStreamMinimumStreamBitrate_ = value;
        bitField0_ |= 0x00000080;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Camera-defined minimum bitrate (static) (Kbps)
       * </pre>
       *
       * <code>optional int32 live_stream_minimum_stream_bitrate = 8;</code>
       * @return This builder for chaining.
       */
      public Builder clearLiveStreamMinimumStreamBitrate() {
        bitField0_ = (bitField0_ & ~0x00000080);
        liveStreamMinimumStreamBitrate_ = 0;
        onChanged();
        return this;
      }

      private int liveStreamMaximumStreamBitrate_ ;
      /**
       * <pre>
       * Camera-defined maximum bitrate (static) (Kbps)
       * </pre>
       *
       * <code>optional int32 live_stream_maximum_stream_bitrate = 9;</code>
       * @return Whether the liveStreamMaximumStreamBitrate field is set.
       */
      @java.lang.Override
      public boolean hasLiveStreamMaximumStreamBitrate() {
        return ((bitField0_ & 0x00000100) != 0);
      }
      /**
       * <pre>
       * Camera-defined maximum bitrate (static) (Kbps)
       * </pre>
       *
       * <code>optional int32 live_stream_maximum_stream_bitrate = 9;</code>
       * @return The liveStreamMaximumStreamBitrate.
       */
      @java.lang.Override
      public int getLiveStreamMaximumStreamBitrate() {
        return liveStreamMaximumStreamBitrate_;
      }
      /**
       * <pre>
       * Camera-defined maximum bitrate (static) (Kbps)
       * </pre>
       *
       * <code>optional int32 live_stream_maximum_stream_bitrate = 9;</code>
       * @param value The liveStreamMaximumStreamBitrate to set.
       * @return This builder for chaining.
       */
      public Builder setLiveStreamMaximumStreamBitrate(int value) {

        liveStreamMaximumStreamBitrate_ = value;
        bitField0_ |= 0x00000100;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Camera-defined maximum bitrate (static) (Kbps)
       * </pre>
       *
       * <code>optional int32 live_stream_maximum_stream_bitrate = 9;</code>
       * @return This builder for chaining.
       */
      public Builder clearLiveStreamMaximumStreamBitrate() {
        bitField0_ = (bitField0_ & ~0x00000100);
        liveStreamMaximumStreamBitrate_ = 0;
        onChanged();
        return this;
      }

      private boolean liveStreamLensSupported_ ;
      /**
       * <pre>
       * Does camera support setting lens for live streaming?
       * </pre>
       *
       * <code>optional bool live_stream_lens_supported = 10;</code>
       * @return Whether the liveStreamLensSupported field is set.
       */
      @java.lang.Override
      public boolean hasLiveStreamLensSupported() {
        return ((bitField0_ & 0x00000200) != 0);
      }
      /**
       * <pre>
       * Does camera support setting lens for live streaming?
       * </pre>
       *
       * <code>optional bool live_stream_lens_supported = 10;</code>
       * @return The liveStreamLensSupported.
       */
      @java.lang.Override
      public boolean getLiveStreamLensSupported() {
        return liveStreamLensSupported_;
      }
      /**
       * <pre>
       * Does camera support setting lens for live streaming?
       * </pre>
       *
       * <code>optional bool live_stream_lens_supported = 10;</code>
       * @param value The liveStreamLensSupported to set.
       * @return This builder for chaining.
       */
      public Builder setLiveStreamLensSupported(boolean value) {

        liveStreamLensSupported_ = value;
        bitField0_ |= 0x00000200;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Does camera support setting lens for live streaming?
       * </pre>
       *
       * <code>optional bool live_stream_lens_supported = 10;</code>
       * @return This builder for chaining.
       */
      public Builder clearLiveStreamLensSupported() {
        bitField0_ = (bitField0_ & ~0x00000200);
        liveStreamLensSupported_ = false;
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.IntList liveStreamLensSupportedArray_ =
        emptyIntList();
      private void ensureLiveStreamLensSupportedArrayIsMutable() {
        if (!((bitField0_ & 0x00000400) != 0)) {
          liveStreamLensSupportedArray_ = makeMutableCopy(liveStreamLensSupportedArray_);
          bitField0_ |= 0x00000400;
        }
      }
      /**
       * <pre>
       * Set of currently supported FOV options
       * </pre>
       *
       * <code>repeated .com.sepp89117.goeasypro_android.gopro.EnumLens live_stream_lens_supported_array = 11;</code>
       * @return A list containing the liveStreamLensSupportedArray.
       */
      public java.util.List<com.sepp89117.goeasypro_android.gopro.LiveStreaming.EnumLens> getLiveStreamLensSupportedArrayList() {
        return new com.google.protobuf.Internal.IntListAdapter<
            com.sepp89117.goeasypro_android.gopro.LiveStreaming.EnumLens>(liveStreamLensSupportedArray_, liveStreamLensSupportedArray_converter_);
      }
      /**
       * <pre>
       * Set of currently supported FOV options
       * </pre>
       *
       * <code>repeated .com.sepp89117.goeasypro_android.gopro.EnumLens live_stream_lens_supported_array = 11;</code>
       * @return The count of liveStreamLensSupportedArray.
       */
      public int getLiveStreamLensSupportedArrayCount() {
        return liveStreamLensSupportedArray_.size();
      }
      /**
       * <pre>
       * Set of currently supported FOV options
       * </pre>
       *
       * <code>repeated .com.sepp89117.goeasypro_android.gopro.EnumLens live_stream_lens_supported_array = 11;</code>
       * @param index The index of the element to return.
       * @return The liveStreamLensSupportedArray at the given index.
       */
      public com.sepp89117.goeasypro_android.gopro.LiveStreaming.EnumLens getLiveStreamLensSupportedArray(int index) {
        return liveStreamLensSupportedArray_converter_.convert(liveStreamLensSupportedArray_.getInt(index));
      }
      /**
       * <pre>
       * Set of currently supported FOV options
       * </pre>
       *
       * <code>repeated .com.sepp89117.goeasypro_android.gopro.EnumLens live_stream_lens_supported_array = 11;</code>
       * @param index The index to set the value at.
       * @param value The liveStreamLensSupportedArray to set.
       * @return This builder for chaining.
       */
      public Builder setLiveStreamLensSupportedArray(
          int index, com.sepp89117.goeasypro_android.gopro.LiveStreaming.EnumLens value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureLiveStreamLensSupportedArrayIsMutable();
        liveStreamLensSupportedArray_.setInt(index, value.getNumber());
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Set of currently supported FOV options
       * </pre>
       *
       * <code>repeated .com.sepp89117.goeasypro_android.gopro.EnumLens live_stream_lens_supported_array = 11;</code>
       * @param value The liveStreamLensSupportedArray to add.
       * @return This builder for chaining.
       */
      public Builder addLiveStreamLensSupportedArray(com.sepp89117.goeasypro_android.gopro.LiveStreaming.EnumLens value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureLiveStreamLensSupportedArrayIsMutable();
        liveStreamLensSupportedArray_.addInt(value.getNumber());
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Set of currently supported FOV options
       * </pre>
       *
       * <code>repeated .com.sepp89117.goeasypro_android.gopro.EnumLens live_stream_lens_supported_array = 11;</code>
       * @param values The liveStreamLensSupportedArray to add.
       * @return This builder for chaining.
       */
      public Builder addAllLiveStreamLensSupportedArray(
          java.lang.Iterable<? extends com.sepp89117.goeasypro_android.gopro.LiveStreaming.EnumLens> values) {
        ensureLiveStreamLensSupportedArrayIsMutable();
        for (com.sepp89117.goeasypro_android.gopro.LiveStreaming.EnumLens value : values) {
          liveStreamLensSupportedArray_.addInt(value.getNumber());
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Set of currently supported FOV options
       * </pre>
       *
       * <code>repeated .com.sepp89117.goeasypro_android.gopro.EnumLens live_stream_lens_supported_array = 11;</code>
       * @return This builder for chaining.
       */
      public Builder clearLiveStreamLensSupportedArray() {
        liveStreamLensSupportedArray_ = emptyIntList();
        bitField0_ = (bitField0_ & ~0x00000400);
        onChanged();
        return this;
      }

      private boolean liveStreamProtuneSupported_ ;
      /**
       * <pre>
       * Does the camera support live stream protune settings
       * </pre>
       *
       * <code>optional bool live_stream_protune_supported = 13;</code>
       * @return Whether the liveStreamProtuneSupported field is set.
       */
      @java.lang.Override
      public boolean hasLiveStreamProtuneSupported() {
        return ((bitField0_ & 0x00000800) != 0);
      }
      /**
       * <pre>
       * Does the camera support live stream protune settings
       * </pre>
       *
       * <code>optional bool live_stream_protune_supported = 13;</code>
       * @return The liveStreamProtuneSupported.
       */
      @java.lang.Override
      public boolean getLiveStreamProtuneSupported() {
        return liveStreamProtuneSupported_;
      }
      /**
       * <pre>
       * Does the camera support live stream protune settings
       * </pre>
       *
       * <code>optional bool live_stream_protune_supported = 13;</code>
       * @param value The liveStreamProtuneSupported to set.
       * @return This builder for chaining.
       */
      public Builder setLiveStreamProtuneSupported(boolean value) {

        liveStreamProtuneSupported_ = value;
        bitField0_ |= 0x00000800;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Does the camera support live stream protune settings
       * </pre>
       *
       * <code>optional bool live_stream_protune_supported = 13;</code>
       * @return This builder for chaining.
       */
      public Builder clearLiveStreamProtuneSupported() {
        bitField0_ = (bitField0_ & ~0x00000800);
        liveStreamProtuneSupported_ = false;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.sepp89117.goeasypro_android.gopro.NotifyLiveStreamStatus)
    }

    // @@protoc_insertion_point(class_scope:com.sepp89117.goeasypro_android.gopro.NotifyLiveStreamStatus)
    private static final com.sepp89117.goeasypro_android.gopro.LiveStreaming.NotifyLiveStreamStatus DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.sepp89117.goeasypro_android.gopro.LiveStreaming.NotifyLiveStreamStatus();
    }

    public static com.sepp89117.goeasypro_android.gopro.LiveStreaming.NotifyLiveStreamStatus getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<NotifyLiveStreamStatus>
        PARSER = new com.google.protobuf.AbstractParser<NotifyLiveStreamStatus>() {
      @java.lang.Override
      public NotifyLiveStreamStatus parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<NotifyLiveStreamStatus> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<NotifyLiveStreamStatus> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.sepp89117.goeasypro_android.gopro.LiveStreaming.NotifyLiveStreamStatus getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface RequestGetLiveStreamStatusOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.sepp89117.goeasypro_android.gopro.RequestGetLiveStreamStatus)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Array of live stream statuses to be notified about
     * </pre>
     *
     * <code>repeated .com.sepp89117.goeasypro_android.gopro.EnumRegisterLiveStreamStatus register_live_stream_status = 1;</code>
     * @return A list containing the registerLiveStreamStatus.
     */
    java.util.List<com.sepp89117.goeasypro_android.gopro.LiveStreaming.EnumRegisterLiveStreamStatus> getRegisterLiveStreamStatusList();
    /**
     * <pre>
     * Array of live stream statuses to be notified about
     * </pre>
     *
     * <code>repeated .com.sepp89117.goeasypro_android.gopro.EnumRegisterLiveStreamStatus register_live_stream_status = 1;</code>
     * @return The count of registerLiveStreamStatus.
     */
    int getRegisterLiveStreamStatusCount();
    /**
     * <pre>
     * Array of live stream statuses to be notified about
     * </pre>
     *
     * <code>repeated .com.sepp89117.goeasypro_android.gopro.EnumRegisterLiveStreamStatus register_live_stream_status = 1;</code>
     * @param index The index of the element to return.
     * @return The registerLiveStreamStatus at the given index.
     */
    com.sepp89117.goeasypro_android.gopro.LiveStreaming.EnumRegisterLiveStreamStatus getRegisterLiveStreamStatus(int index);

    /**
     * <pre>
     * Array of live stream statuses to stop being notified about
     * </pre>
     *
     * <code>repeated .com.sepp89117.goeasypro_android.gopro.EnumRegisterLiveStreamStatus unregister_live_stream_status = 2;</code>
     * @return A list containing the unregisterLiveStreamStatus.
     */
    java.util.List<com.sepp89117.goeasypro_android.gopro.LiveStreaming.EnumRegisterLiveStreamStatus> getUnregisterLiveStreamStatusList();
    /**
     * <pre>
     * Array of live stream statuses to stop being notified about
     * </pre>
     *
     * <code>repeated .com.sepp89117.goeasypro_android.gopro.EnumRegisterLiveStreamStatus unregister_live_stream_status = 2;</code>
     * @return The count of unregisterLiveStreamStatus.
     */
    int getUnregisterLiveStreamStatusCount();
    /**
     * <pre>
     * Array of live stream statuses to stop being notified about
     * </pre>
     *
     * <code>repeated .com.sepp89117.goeasypro_android.gopro.EnumRegisterLiveStreamStatus unregister_live_stream_status = 2;</code>
     * @param index The index of the element to return.
     * @return The unregisterLiveStreamStatus at the given index.
     */
    com.sepp89117.goeasypro_android.gopro.LiveStreaming.EnumRegisterLiveStreamStatus getUnregisterLiveStreamStatus(int index);
  }
  /**
   * <pre>
   * *
   * Get the current livestream status (and optionally register for future status changes)
   *
   * Response: &#64;ref NotifyLiveStreamStatus
   *
   * Notification: &#64;ref NotifyLiveStreamStatus
   * </pre>
   *
   * Protobuf type {@code com.sepp89117.goeasypro_android.gopro.RequestGetLiveStreamStatus}
   */
  public static final class RequestGetLiveStreamStatus extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:com.sepp89117.goeasypro_android.gopro.RequestGetLiveStreamStatus)
      RequestGetLiveStreamStatusOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 29,
        /* patch= */ 2,
        /* suffix= */ "",
        RequestGetLiveStreamStatus.class.getName());
    }
    // Use RequestGetLiveStreamStatus.newBuilder() to construct.
    private RequestGetLiveStreamStatus(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private RequestGetLiveStreamStatus() {
      registerLiveStreamStatus_ = emptyIntList();
      unregisterLiveStreamStatus_ = emptyIntList();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.sepp89117.goeasypro_android.gopro.LiveStreaming.internal_static_com_sepp89117_goeasypro_android_gopro_RequestGetLiveStreamStatus_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.sepp89117.goeasypro_android.gopro.LiveStreaming.internal_static_com_sepp89117_goeasypro_android_gopro_RequestGetLiveStreamStatus_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.sepp89117.goeasypro_android.gopro.LiveStreaming.RequestGetLiveStreamStatus.class, com.sepp89117.goeasypro_android.gopro.LiveStreaming.RequestGetLiveStreamStatus.Builder.class);
    }

    public static final int REGISTER_LIVE_STREAM_STATUS_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private com.google.protobuf.Internal.IntList registerLiveStreamStatus_;
    private static final com.google.protobuf.Internal.IntListAdapter.IntConverter<
        com.sepp89117.goeasypro_android.gopro.LiveStreaming.EnumRegisterLiveStreamStatus> registerLiveStreamStatus_converter_ =
            new com.google.protobuf.Internal.IntListAdapter.IntConverter<
                com.sepp89117.goeasypro_android.gopro.LiveStreaming.EnumRegisterLiveStreamStatus>() {
              public com.sepp89117.goeasypro_android.gopro.LiveStreaming.EnumRegisterLiveStreamStatus convert(int from) {
                com.sepp89117.goeasypro_android.gopro.LiveStreaming.EnumRegisterLiveStreamStatus result = com.sepp89117.goeasypro_android.gopro.LiveStreaming.EnumRegisterLiveStreamStatus.forNumber(from);
                return result == null ? com.sepp89117.goeasypro_android.gopro.LiveStreaming.EnumRegisterLiveStreamStatus.REGISTER_LIVE_STREAM_STATUS_STATUS : result;
              }
            };
    /**
     * <pre>
     * Array of live stream statuses to be notified about
     * </pre>
     *
     * <code>repeated .com.sepp89117.goeasypro_android.gopro.EnumRegisterLiveStreamStatus register_live_stream_status = 1;</code>
     * @return A list containing the registerLiveStreamStatus.
     */
    @java.lang.Override
    public java.util.List<com.sepp89117.goeasypro_android.gopro.LiveStreaming.EnumRegisterLiveStreamStatus> getRegisterLiveStreamStatusList() {
      return new com.google.protobuf.Internal.IntListAdapter<
          com.sepp89117.goeasypro_android.gopro.LiveStreaming.EnumRegisterLiveStreamStatus>(registerLiveStreamStatus_, registerLiveStreamStatus_converter_);
    }
    /**
     * <pre>
     * Array of live stream statuses to be notified about
     * </pre>
     *
     * <code>repeated .com.sepp89117.goeasypro_android.gopro.EnumRegisterLiveStreamStatus register_live_stream_status = 1;</code>
     * @return The count of registerLiveStreamStatus.
     */
    @java.lang.Override
    public int getRegisterLiveStreamStatusCount() {
      return registerLiveStreamStatus_.size();
    }
    /**
     * <pre>
     * Array of live stream statuses to be notified about
     * </pre>
     *
     * <code>repeated .com.sepp89117.goeasypro_android.gopro.EnumRegisterLiveStreamStatus register_live_stream_status = 1;</code>
     * @param index The index of the element to return.
     * @return The registerLiveStreamStatus at the given index.
     */
    @java.lang.Override
    public com.sepp89117.goeasypro_android.gopro.LiveStreaming.EnumRegisterLiveStreamStatus getRegisterLiveStreamStatus(int index) {
      return registerLiveStreamStatus_converter_.convert(registerLiveStreamStatus_.getInt(index));
    }

    public static final int UNREGISTER_LIVE_STREAM_STATUS_FIELD_NUMBER = 2;
    @SuppressWarnings("serial")
    private com.google.protobuf.Internal.IntList unregisterLiveStreamStatus_;
    private static final com.google.protobuf.Internal.IntListAdapter.IntConverter<
        com.sepp89117.goeasypro_android.gopro.LiveStreaming.EnumRegisterLiveStreamStatus> unregisterLiveStreamStatus_converter_ =
            new com.google.protobuf.Internal.IntListAdapter.IntConverter<
                com.sepp89117.goeasypro_android.gopro.LiveStreaming.EnumRegisterLiveStreamStatus>() {
              public com.sepp89117.goeasypro_android.gopro.LiveStreaming.EnumRegisterLiveStreamStatus convert(int from) {
                com.sepp89117.goeasypro_android.gopro.LiveStreaming.EnumRegisterLiveStreamStatus result = com.sepp89117.goeasypro_android.gopro.LiveStreaming.EnumRegisterLiveStreamStatus.forNumber(from);
                return result == null ? com.sepp89117.goeasypro_android.gopro.LiveStreaming.EnumRegisterLiveStreamStatus.REGISTER_LIVE_STREAM_STATUS_STATUS : result;
              }
            };
    /**
     * <pre>
     * Array of live stream statuses to stop being notified about
     * </pre>
     *
     * <code>repeated .com.sepp89117.goeasypro_android.gopro.EnumRegisterLiveStreamStatus unregister_live_stream_status = 2;</code>
     * @return A list containing the unregisterLiveStreamStatus.
     */
    @java.lang.Override
    public java.util.List<com.sepp89117.goeasypro_android.gopro.LiveStreaming.EnumRegisterLiveStreamStatus> getUnregisterLiveStreamStatusList() {
      return new com.google.protobuf.Internal.IntListAdapter<
          com.sepp89117.goeasypro_android.gopro.LiveStreaming.EnumRegisterLiveStreamStatus>(unregisterLiveStreamStatus_, unregisterLiveStreamStatus_converter_);
    }
    /**
     * <pre>
     * Array of live stream statuses to stop being notified about
     * </pre>
     *
     * <code>repeated .com.sepp89117.goeasypro_android.gopro.EnumRegisterLiveStreamStatus unregister_live_stream_status = 2;</code>
     * @return The count of unregisterLiveStreamStatus.
     */
    @java.lang.Override
    public int getUnregisterLiveStreamStatusCount() {
      return unregisterLiveStreamStatus_.size();
    }
    /**
     * <pre>
     * Array of live stream statuses to stop being notified about
     * </pre>
     *
     * <code>repeated .com.sepp89117.goeasypro_android.gopro.EnumRegisterLiveStreamStatus unregister_live_stream_status = 2;</code>
     * @param index The index of the element to return.
     * @return The unregisterLiveStreamStatus at the given index.
     */
    @java.lang.Override
    public com.sepp89117.goeasypro_android.gopro.LiveStreaming.EnumRegisterLiveStreamStatus getUnregisterLiveStreamStatus(int index) {
      return unregisterLiveStreamStatus_converter_.convert(unregisterLiveStreamStatus_.getInt(index));
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < registerLiveStreamStatus_.size(); i++) {
        output.writeEnum(1, registerLiveStreamStatus_.getInt(i));
      }
      for (int i = 0; i < unregisterLiveStreamStatus_.size(); i++) {
        output.writeEnum(2, unregisterLiveStreamStatus_.getInt(i));
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        for (int i = 0; i < registerLiveStreamStatus_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeEnumSizeNoTag(registerLiveStreamStatus_.getInt(i));
        }
        size += dataSize;
        size += 1 * registerLiveStreamStatus_.size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < unregisterLiveStreamStatus_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeEnumSizeNoTag(unregisterLiveStreamStatus_.getInt(i));
        }
        size += dataSize;
        size += 1 * unregisterLiveStreamStatus_.size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.sepp89117.goeasypro_android.gopro.LiveStreaming.RequestGetLiveStreamStatus)) {
        return super.equals(obj);
      }
      com.sepp89117.goeasypro_android.gopro.LiveStreaming.RequestGetLiveStreamStatus other = (com.sepp89117.goeasypro_android.gopro.LiveStreaming.RequestGetLiveStreamStatus) obj;

      if (!registerLiveStreamStatus_.equals(other.registerLiveStreamStatus_)) return false;
      if (!unregisterLiveStreamStatus_.equals(other.unregisterLiveStreamStatus_)) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getRegisterLiveStreamStatusCount() > 0) {
        hash = (37 * hash) + REGISTER_LIVE_STREAM_STATUS_FIELD_NUMBER;
        hash = (53 * hash) + registerLiveStreamStatus_.hashCode();
      }
      if (getUnregisterLiveStreamStatusCount() > 0) {
        hash = (37 * hash) + UNREGISTER_LIVE_STREAM_STATUS_FIELD_NUMBER;
        hash = (53 * hash) + unregisterLiveStreamStatus_.hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.sepp89117.goeasypro_android.gopro.LiveStreaming.RequestGetLiveStreamStatus parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sepp89117.goeasypro_android.gopro.LiveStreaming.RequestGetLiveStreamStatus parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sepp89117.goeasypro_android.gopro.LiveStreaming.RequestGetLiveStreamStatus parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sepp89117.goeasypro_android.gopro.LiveStreaming.RequestGetLiveStreamStatus parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sepp89117.goeasypro_android.gopro.LiveStreaming.RequestGetLiveStreamStatus parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sepp89117.goeasypro_android.gopro.LiveStreaming.RequestGetLiveStreamStatus parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sepp89117.goeasypro_android.gopro.LiveStreaming.RequestGetLiveStreamStatus parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static com.sepp89117.goeasypro_android.gopro.LiveStreaming.RequestGetLiveStreamStatus parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static com.sepp89117.goeasypro_android.gopro.LiveStreaming.RequestGetLiveStreamStatus parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static com.sepp89117.goeasypro_android.gopro.LiveStreaming.RequestGetLiveStreamStatus parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.sepp89117.goeasypro_android.gopro.LiveStreaming.RequestGetLiveStreamStatus parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static com.sepp89117.goeasypro_android.gopro.LiveStreaming.RequestGetLiveStreamStatus parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.sepp89117.goeasypro_android.gopro.LiveStreaming.RequestGetLiveStreamStatus prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * *
     * Get the current livestream status (and optionally register for future status changes)
     *
     * Response: &#64;ref NotifyLiveStreamStatus
     *
     * Notification: &#64;ref NotifyLiveStreamStatus
     * </pre>
     *
     * Protobuf type {@code com.sepp89117.goeasypro_android.gopro.RequestGetLiveStreamStatus}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:com.sepp89117.goeasypro_android.gopro.RequestGetLiveStreamStatus)
        com.sepp89117.goeasypro_android.gopro.LiveStreaming.RequestGetLiveStreamStatusOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.sepp89117.goeasypro_android.gopro.LiveStreaming.internal_static_com_sepp89117_goeasypro_android_gopro_RequestGetLiveStreamStatus_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.sepp89117.goeasypro_android.gopro.LiveStreaming.internal_static_com_sepp89117_goeasypro_android_gopro_RequestGetLiveStreamStatus_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.sepp89117.goeasypro_android.gopro.LiveStreaming.RequestGetLiveStreamStatus.class, com.sepp89117.goeasypro_android.gopro.LiveStreaming.RequestGetLiveStreamStatus.Builder.class);
      }

      // Construct using com.sepp89117.goeasypro_android.gopro.LiveStreaming.RequestGetLiveStreamStatus.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        registerLiveStreamStatus_ = emptyIntList();
        bitField0_ = (bitField0_ & ~0x00000001);
        unregisterLiveStreamStatus_ = emptyIntList();
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.sepp89117.goeasypro_android.gopro.LiveStreaming.internal_static_com_sepp89117_goeasypro_android_gopro_RequestGetLiveStreamStatus_descriptor;
      }

      @java.lang.Override
      public com.sepp89117.goeasypro_android.gopro.LiveStreaming.RequestGetLiveStreamStatus getDefaultInstanceForType() {
        return com.sepp89117.goeasypro_android.gopro.LiveStreaming.RequestGetLiveStreamStatus.getDefaultInstance();
      }

      @java.lang.Override
      public com.sepp89117.goeasypro_android.gopro.LiveStreaming.RequestGetLiveStreamStatus build() {
        com.sepp89117.goeasypro_android.gopro.LiveStreaming.RequestGetLiveStreamStatus result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.sepp89117.goeasypro_android.gopro.LiveStreaming.RequestGetLiveStreamStatus buildPartial() {
        com.sepp89117.goeasypro_android.gopro.LiveStreaming.RequestGetLiveStreamStatus result = new com.sepp89117.goeasypro_android.gopro.LiveStreaming.RequestGetLiveStreamStatus(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(com.sepp89117.goeasypro_android.gopro.LiveStreaming.RequestGetLiveStreamStatus result) {
        if (((bitField0_ & 0x00000001) != 0)) {
          registerLiveStreamStatus_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.registerLiveStreamStatus_ = registerLiveStreamStatus_;
        if (((bitField0_ & 0x00000002) != 0)) {
          unregisterLiveStreamStatus_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.unregisterLiveStreamStatus_ = unregisterLiveStreamStatus_;
      }

      private void buildPartial0(com.sepp89117.goeasypro_android.gopro.LiveStreaming.RequestGetLiveStreamStatus result) {
        int from_bitField0_ = bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.sepp89117.goeasypro_android.gopro.LiveStreaming.RequestGetLiveStreamStatus) {
          return mergeFrom((com.sepp89117.goeasypro_android.gopro.LiveStreaming.RequestGetLiveStreamStatus)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.sepp89117.goeasypro_android.gopro.LiveStreaming.RequestGetLiveStreamStatus other) {
        if (other == com.sepp89117.goeasypro_android.gopro.LiveStreaming.RequestGetLiveStreamStatus.getDefaultInstance()) return this;
        if (!other.registerLiveStreamStatus_.isEmpty()) {
          if (registerLiveStreamStatus_.isEmpty()) {
            registerLiveStreamStatus_ = other.registerLiveStreamStatus_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureRegisterLiveStreamStatusIsMutable();
            registerLiveStreamStatus_.addAll(other.registerLiveStreamStatus_);
          }
          onChanged();
        }
        if (!other.unregisterLiveStreamStatus_.isEmpty()) {
          if (unregisterLiveStreamStatus_.isEmpty()) {
            unregisterLiveStreamStatus_ = other.unregisterLiveStreamStatus_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureUnregisterLiveStreamStatusIsMutable();
            unregisterLiveStreamStatus_.addAll(other.unregisterLiveStreamStatus_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                int tmpRaw = input.readEnum();
                com.sepp89117.goeasypro_android.gopro.LiveStreaming.EnumRegisterLiveStreamStatus tmpValue =
                    com.sepp89117.goeasypro_android.gopro.LiveStreaming.EnumRegisterLiveStreamStatus.forNumber(tmpRaw);
                if (tmpValue == null) {
                  mergeUnknownVarintField(1, tmpRaw);
                } else {
                  ensureRegisterLiveStreamStatusIsMutable();
                  registerLiveStreamStatus_.addInt(tmpRaw);
                }
                break;
              } // case 8
              case 10: {
                int length = input.readRawVarint32();
                int oldLimit = input.pushLimit(length);
                while(input.getBytesUntilLimit() > 0) {
                  int tmpRaw = input.readEnum();
                  com.sepp89117.goeasypro_android.gopro.LiveStreaming.EnumRegisterLiveStreamStatus tmpValue =
                      com.sepp89117.goeasypro_android.gopro.LiveStreaming.EnumRegisterLiveStreamStatus.forNumber(tmpRaw);
                  if (tmpValue == null) {
                    mergeUnknownVarintField(1, tmpRaw);
                  } else {
                    ensureRegisterLiveStreamStatusIsMutable();
                    registerLiveStreamStatus_.addInt(tmpRaw);
                  }
                }
                input.popLimit(oldLimit);
                break;
              } // case 10
              case 16: {
                int tmpRaw = input.readEnum();
                com.sepp89117.goeasypro_android.gopro.LiveStreaming.EnumRegisterLiveStreamStatus tmpValue =
                    com.sepp89117.goeasypro_android.gopro.LiveStreaming.EnumRegisterLiveStreamStatus.forNumber(tmpRaw);
                if (tmpValue == null) {
                  mergeUnknownVarintField(2, tmpRaw);
                } else {
                  ensureUnregisterLiveStreamStatusIsMutable();
                  unregisterLiveStreamStatus_.addInt(tmpRaw);
                }
                break;
              } // case 16
              case 18: {
                int length = input.readRawVarint32();
                int oldLimit = input.pushLimit(length);
                while(input.getBytesUntilLimit() > 0) {
                  int tmpRaw = input.readEnum();
                  com.sepp89117.goeasypro_android.gopro.LiveStreaming.EnumRegisterLiveStreamStatus tmpValue =
                      com.sepp89117.goeasypro_android.gopro.LiveStreaming.EnumRegisterLiveStreamStatus.forNumber(tmpRaw);
                  if (tmpValue == null) {
                    mergeUnknownVarintField(2, tmpRaw);
                  } else {
                    ensureUnregisterLiveStreamStatusIsMutable();
                    unregisterLiveStreamStatus_.addInt(tmpRaw);
                  }
                }
                input.popLimit(oldLimit);
                break;
              } // case 18
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private com.google.protobuf.Internal.IntList registerLiveStreamStatus_ =
        emptyIntList();
      private void ensureRegisterLiveStreamStatusIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          registerLiveStreamStatus_ = makeMutableCopy(registerLiveStreamStatus_);
          bitField0_ |= 0x00000001;
        }
      }
      /**
       * <pre>
       * Array of live stream statuses to be notified about
       * </pre>
       *
       * <code>repeated .com.sepp89117.goeasypro_android.gopro.EnumRegisterLiveStreamStatus register_live_stream_status = 1;</code>
       * @return A list containing the registerLiveStreamStatus.
       */
      public java.util.List<com.sepp89117.goeasypro_android.gopro.LiveStreaming.EnumRegisterLiveStreamStatus> getRegisterLiveStreamStatusList() {
        return new com.google.protobuf.Internal.IntListAdapter<
            com.sepp89117.goeasypro_android.gopro.LiveStreaming.EnumRegisterLiveStreamStatus>(registerLiveStreamStatus_, registerLiveStreamStatus_converter_);
      }
      /**
       * <pre>
       * Array of live stream statuses to be notified about
       * </pre>
       *
       * <code>repeated .com.sepp89117.goeasypro_android.gopro.EnumRegisterLiveStreamStatus register_live_stream_status = 1;</code>
       * @return The count of registerLiveStreamStatus.
       */
      public int getRegisterLiveStreamStatusCount() {
        return registerLiveStreamStatus_.size();
      }
      /**
       * <pre>
       * Array of live stream statuses to be notified about
       * </pre>
       *
       * <code>repeated .com.sepp89117.goeasypro_android.gopro.EnumRegisterLiveStreamStatus register_live_stream_status = 1;</code>
       * @param index The index of the element to return.
       * @return The registerLiveStreamStatus at the given index.
       */
      public com.sepp89117.goeasypro_android.gopro.LiveStreaming.EnumRegisterLiveStreamStatus getRegisterLiveStreamStatus(int index) {
        return registerLiveStreamStatus_converter_.convert(registerLiveStreamStatus_.getInt(index));
      }
      /**
       * <pre>
       * Array of live stream statuses to be notified about
       * </pre>
       *
       * <code>repeated .com.sepp89117.goeasypro_android.gopro.EnumRegisterLiveStreamStatus register_live_stream_status = 1;</code>
       * @param index The index to set the value at.
       * @param value The registerLiveStreamStatus to set.
       * @return This builder for chaining.
       */
      public Builder setRegisterLiveStreamStatus(
          int index, com.sepp89117.goeasypro_android.gopro.LiveStreaming.EnumRegisterLiveStreamStatus value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureRegisterLiveStreamStatusIsMutable();
        registerLiveStreamStatus_.setInt(index, value.getNumber());
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Array of live stream statuses to be notified about
       * </pre>
       *
       * <code>repeated .com.sepp89117.goeasypro_android.gopro.EnumRegisterLiveStreamStatus register_live_stream_status = 1;</code>
       * @param value The registerLiveStreamStatus to add.
       * @return This builder for chaining.
       */
      public Builder addRegisterLiveStreamStatus(com.sepp89117.goeasypro_android.gopro.LiveStreaming.EnumRegisterLiveStreamStatus value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureRegisterLiveStreamStatusIsMutable();
        registerLiveStreamStatus_.addInt(value.getNumber());
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Array of live stream statuses to be notified about
       * </pre>
       *
       * <code>repeated .com.sepp89117.goeasypro_android.gopro.EnumRegisterLiveStreamStatus register_live_stream_status = 1;</code>
       * @param values The registerLiveStreamStatus to add.
       * @return This builder for chaining.
       */
      public Builder addAllRegisterLiveStreamStatus(
          java.lang.Iterable<? extends com.sepp89117.goeasypro_android.gopro.LiveStreaming.EnumRegisterLiveStreamStatus> values) {
        ensureRegisterLiveStreamStatusIsMutable();
        for (com.sepp89117.goeasypro_android.gopro.LiveStreaming.EnumRegisterLiveStreamStatus value : values) {
          registerLiveStreamStatus_.addInt(value.getNumber());
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Array of live stream statuses to be notified about
       * </pre>
       *
       * <code>repeated .com.sepp89117.goeasypro_android.gopro.EnumRegisterLiveStreamStatus register_live_stream_status = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearRegisterLiveStreamStatus() {
        registerLiveStreamStatus_ = emptyIntList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.IntList unregisterLiveStreamStatus_ =
        emptyIntList();
      private void ensureUnregisterLiveStreamStatusIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          unregisterLiveStreamStatus_ = makeMutableCopy(unregisterLiveStreamStatus_);
          bitField0_ |= 0x00000002;
        }
      }
      /**
       * <pre>
       * Array of live stream statuses to stop being notified about
       * </pre>
       *
       * <code>repeated .com.sepp89117.goeasypro_android.gopro.EnumRegisterLiveStreamStatus unregister_live_stream_status = 2;</code>
       * @return A list containing the unregisterLiveStreamStatus.
       */
      public java.util.List<com.sepp89117.goeasypro_android.gopro.LiveStreaming.EnumRegisterLiveStreamStatus> getUnregisterLiveStreamStatusList() {
        return new com.google.protobuf.Internal.IntListAdapter<
            com.sepp89117.goeasypro_android.gopro.LiveStreaming.EnumRegisterLiveStreamStatus>(unregisterLiveStreamStatus_, unregisterLiveStreamStatus_converter_);
      }
      /**
       * <pre>
       * Array of live stream statuses to stop being notified about
       * </pre>
       *
       * <code>repeated .com.sepp89117.goeasypro_android.gopro.EnumRegisterLiveStreamStatus unregister_live_stream_status = 2;</code>
       * @return The count of unregisterLiveStreamStatus.
       */
      public int getUnregisterLiveStreamStatusCount() {
        return unregisterLiveStreamStatus_.size();
      }
      /**
       * <pre>
       * Array of live stream statuses to stop being notified about
       * </pre>
       *
       * <code>repeated .com.sepp89117.goeasypro_android.gopro.EnumRegisterLiveStreamStatus unregister_live_stream_status = 2;</code>
       * @param index The index of the element to return.
       * @return The unregisterLiveStreamStatus at the given index.
       */
      public com.sepp89117.goeasypro_android.gopro.LiveStreaming.EnumRegisterLiveStreamStatus getUnregisterLiveStreamStatus(int index) {
        return unregisterLiveStreamStatus_converter_.convert(unregisterLiveStreamStatus_.getInt(index));
      }
      /**
       * <pre>
       * Array of live stream statuses to stop being notified about
       * </pre>
       *
       * <code>repeated .com.sepp89117.goeasypro_android.gopro.EnumRegisterLiveStreamStatus unregister_live_stream_status = 2;</code>
       * @param index The index to set the value at.
       * @param value The unregisterLiveStreamStatus to set.
       * @return This builder for chaining.
       */
      public Builder setUnregisterLiveStreamStatus(
          int index, com.sepp89117.goeasypro_android.gopro.LiveStreaming.EnumRegisterLiveStreamStatus value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureUnregisterLiveStreamStatusIsMutable();
        unregisterLiveStreamStatus_.setInt(index, value.getNumber());
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Array of live stream statuses to stop being notified about
       * </pre>
       *
       * <code>repeated .com.sepp89117.goeasypro_android.gopro.EnumRegisterLiveStreamStatus unregister_live_stream_status = 2;</code>
       * @param value The unregisterLiveStreamStatus to add.
       * @return This builder for chaining.
       */
      public Builder addUnregisterLiveStreamStatus(com.sepp89117.goeasypro_android.gopro.LiveStreaming.EnumRegisterLiveStreamStatus value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureUnregisterLiveStreamStatusIsMutable();
        unregisterLiveStreamStatus_.addInt(value.getNumber());
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Array of live stream statuses to stop being notified about
       * </pre>
       *
       * <code>repeated .com.sepp89117.goeasypro_android.gopro.EnumRegisterLiveStreamStatus unregister_live_stream_status = 2;</code>
       * @param values The unregisterLiveStreamStatus to add.
       * @return This builder for chaining.
       */
      public Builder addAllUnregisterLiveStreamStatus(
          java.lang.Iterable<? extends com.sepp89117.goeasypro_android.gopro.LiveStreaming.EnumRegisterLiveStreamStatus> values) {
        ensureUnregisterLiveStreamStatusIsMutable();
        for (com.sepp89117.goeasypro_android.gopro.LiveStreaming.EnumRegisterLiveStreamStatus value : values) {
          unregisterLiveStreamStatus_.addInt(value.getNumber());
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Array of live stream statuses to stop being notified about
       * </pre>
       *
       * <code>repeated .com.sepp89117.goeasypro_android.gopro.EnumRegisterLiveStreamStatus unregister_live_stream_status = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearUnregisterLiveStreamStatus() {
        unregisterLiveStreamStatus_ = emptyIntList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.sepp89117.goeasypro_android.gopro.RequestGetLiveStreamStatus)
    }

    // @@protoc_insertion_point(class_scope:com.sepp89117.goeasypro_android.gopro.RequestGetLiveStreamStatus)
    private static final com.sepp89117.goeasypro_android.gopro.LiveStreaming.RequestGetLiveStreamStatus DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.sepp89117.goeasypro_android.gopro.LiveStreaming.RequestGetLiveStreamStatus();
    }

    public static com.sepp89117.goeasypro_android.gopro.LiveStreaming.RequestGetLiveStreamStatus getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<RequestGetLiveStreamStatus>
        PARSER = new com.google.protobuf.AbstractParser<RequestGetLiveStreamStatus>() {
      @java.lang.Override
      public RequestGetLiveStreamStatus parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<RequestGetLiveStreamStatus> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<RequestGetLiveStreamStatus> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.sepp89117.goeasypro_android.gopro.LiveStreaming.RequestGetLiveStreamStatus getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface RequestSetLiveStreamModeOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.sepp89117.goeasypro_android.gopro.RequestSetLiveStreamMode)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * RTMP(S) URL used for live stream
     * </pre>
     *
     * <code>optional string url = 1;</code>
     * @return Whether the url field is set.
     */
    boolean hasUrl();
    /**
     * <pre>
     * RTMP(S) URL used for live stream
     * </pre>
     *
     * <code>optional string url = 1;</code>
     * @return The url.
     */
    java.lang.String getUrl();
    /**
     * <pre>
     * RTMP(S) URL used for live stream
     * </pre>
     *
     * <code>optional string url = 1;</code>
     * @return The bytes for url.
     */
    com.google.protobuf.ByteString
        getUrlBytes();

    /**
     * <pre>
     * Save media to sdcard while streaming?
     * </pre>
     *
     * <code>optional bool encode = 2;</code>
     * @return Whether the encode field is set.
     */
    boolean hasEncode();
    /**
     * <pre>
     * Save media to sdcard while streaming?
     * </pre>
     *
     * <code>optional bool encode = 2;</code>
     * @return The encode.
     */
    boolean getEncode();

    /**
     * <pre>
     * *
     * Resolution to use for live stream
     *
     * The set of supported resolutions is only available from the `live_stream_window_size_supported_array`
     * in &#64;ref NotifyLiveStreamStatus.
     * </pre>
     *
     * <code>optional .com.sepp89117.goeasypro_android.gopro.EnumWindowSize window_size = 3;</code>
     * @return Whether the windowSize field is set.
     */
    boolean hasWindowSize();
    /**
     * <pre>
     * *
     * Resolution to use for live stream
     *
     * The set of supported resolutions is only available from the `live_stream_window_size_supported_array`
     * in &#64;ref NotifyLiveStreamStatus.
     * </pre>
     *
     * <code>optional .com.sepp89117.goeasypro_android.gopro.EnumWindowSize window_size = 3;</code>
     * @return The windowSize.
     */
    com.sepp89117.goeasypro_android.gopro.LiveStreaming.EnumWindowSize getWindowSize();

    /**
     * <pre>
     * Certificate for servers that require it in PEM format
     * </pre>
     *
     * <code>optional bytes cert = 6;</code>
     * @return Whether the cert field is set.
     */
    boolean hasCert();
    /**
     * <pre>
     * Certificate for servers that require it in PEM format
     * </pre>
     *
     * <code>optional bytes cert = 6;</code>
     * @return The cert.
     */
    com.google.protobuf.ByteString getCert();

    /**
     * <pre>
     * Minimum desired bitrate (may or may not be honored)
     * </pre>
     *
     * <code>optional int32 minimum_bitrate = 7;</code>
     * @return Whether the minimumBitrate field is set.
     */
    boolean hasMinimumBitrate();
    /**
     * <pre>
     * Minimum desired bitrate (may or may not be honored)
     * </pre>
     *
     * <code>optional int32 minimum_bitrate = 7;</code>
     * @return The minimumBitrate.
     */
    int getMinimumBitrate();

    /**
     * <pre>
     * Maximum desired bitrate (may or may not be honored)
     * </pre>
     *
     * <code>optional int32 maximum_bitrate = 8;</code>
     * @return Whether the maximumBitrate field is set.
     */
    boolean hasMaximumBitrate();
    /**
     * <pre>
     * Maximum desired bitrate (may or may not be honored)
     * </pre>
     *
     * <code>optional int32 maximum_bitrate = 8;</code>
     * @return The maximumBitrate.
     */
    int getMaximumBitrate();

    /**
     * <pre>
     * Starting bitrate
     * </pre>
     *
     * <code>optional int32 starting_bitrate = 9;</code>
     * @return Whether the startingBitrate field is set.
     */
    boolean hasStartingBitrate();
    /**
     * <pre>
     * Starting bitrate
     * </pre>
     *
     * <code>optional int32 starting_bitrate = 9;</code>
     * @return The startingBitrate.
     */
    int getStartingBitrate();

    /**
     * <pre>
     * *
     * Lens to use for live stream
     *
     * The set of supported lenses is only available from the  `live_stream_lens_supported_array`
     * in &#64;ref NotifyLiveStreamStatus.
     * </pre>
     *
     * <code>optional .com.sepp89117.goeasypro_android.gopro.EnumLens lens = 10;</code>
     * @return Whether the lens field is set.
     */
    boolean hasLens();
    /**
     * <pre>
     * *
     * Lens to use for live stream
     *
     * The set of supported lenses is only available from the  `live_stream_lens_supported_array`
     * in &#64;ref NotifyLiveStreamStatus.
     * </pre>
     *
     * <code>optional .com.sepp89117.goeasypro_android.gopro.EnumLens lens = 10;</code>
     * @return The lens.
     */
    com.sepp89117.goeasypro_android.gopro.LiveStreaming.EnumLens getLens();
  }
  /**
   * <pre>
   * *
   * Configure Live Streaming
   *
   * Response: &#64;ref ResponseGeneric
   * </pre>
   *
   * Protobuf type {@code com.sepp89117.goeasypro_android.gopro.RequestSetLiveStreamMode}
   */
  public static final class RequestSetLiveStreamMode extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:com.sepp89117.goeasypro_android.gopro.RequestSetLiveStreamMode)
      RequestSetLiveStreamModeOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 29,
        /* patch= */ 2,
        /* suffix= */ "",
        RequestSetLiveStreamMode.class.getName());
    }
    // Use RequestSetLiveStreamMode.newBuilder() to construct.
    private RequestSetLiveStreamMode(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private RequestSetLiveStreamMode() {
      url_ = "";
      windowSize_ = 4;
      cert_ = com.google.protobuf.ByteString.EMPTY;
      lens_ = 0;
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.sepp89117.goeasypro_android.gopro.LiveStreaming.internal_static_com_sepp89117_goeasypro_android_gopro_RequestSetLiveStreamMode_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.sepp89117.goeasypro_android.gopro.LiveStreaming.internal_static_com_sepp89117_goeasypro_android_gopro_RequestSetLiveStreamMode_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.sepp89117.goeasypro_android.gopro.LiveStreaming.RequestSetLiveStreamMode.class, com.sepp89117.goeasypro_android.gopro.LiveStreaming.RequestSetLiveStreamMode.Builder.class);
    }

    private int bitField0_;
    public static final int URL_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private volatile java.lang.Object url_ = "";
    /**
     * <pre>
     * RTMP(S) URL used for live stream
     * </pre>
     *
     * <code>optional string url = 1;</code>
     * @return Whether the url field is set.
     */
    @java.lang.Override
    public boolean hasUrl() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * RTMP(S) URL used for live stream
     * </pre>
     *
     * <code>optional string url = 1;</code>
     * @return The url.
     */
    @java.lang.Override
    public java.lang.String getUrl() {
      java.lang.Object ref = url_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          url_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     * RTMP(S) URL used for live stream
     * </pre>
     *
     * <code>optional string url = 1;</code>
     * @return The bytes for url.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getUrlBytes() {
      java.lang.Object ref = url_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        url_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int ENCODE_FIELD_NUMBER = 2;
    private boolean encode_ = false;
    /**
     * <pre>
     * Save media to sdcard while streaming?
     * </pre>
     *
     * <code>optional bool encode = 2;</code>
     * @return Whether the encode field is set.
     */
    @java.lang.Override
    public boolean hasEncode() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * Save media to sdcard while streaming?
     * </pre>
     *
     * <code>optional bool encode = 2;</code>
     * @return The encode.
     */
    @java.lang.Override
    public boolean getEncode() {
      return encode_;
    }

    public static final int WINDOW_SIZE_FIELD_NUMBER = 3;
    private int windowSize_ = 4;
    /**
     * <pre>
     * *
     * Resolution to use for live stream
     *
     * The set of supported resolutions is only available from the `live_stream_window_size_supported_array`
     * in &#64;ref NotifyLiveStreamStatus.
     * </pre>
     *
     * <code>optional .com.sepp89117.goeasypro_android.gopro.EnumWindowSize window_size = 3;</code>
     * @return Whether the windowSize field is set.
     */
    @java.lang.Override public boolean hasWindowSize() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * *
     * Resolution to use for live stream
     *
     * The set of supported resolutions is only available from the `live_stream_window_size_supported_array`
     * in &#64;ref NotifyLiveStreamStatus.
     * </pre>
     *
     * <code>optional .com.sepp89117.goeasypro_android.gopro.EnumWindowSize window_size = 3;</code>
     * @return The windowSize.
     */
    @java.lang.Override public com.sepp89117.goeasypro_android.gopro.LiveStreaming.EnumWindowSize getWindowSize() {
      com.sepp89117.goeasypro_android.gopro.LiveStreaming.EnumWindowSize result = com.sepp89117.goeasypro_android.gopro.LiveStreaming.EnumWindowSize.forNumber(windowSize_);
      return result == null ? com.sepp89117.goeasypro_android.gopro.LiveStreaming.EnumWindowSize.WINDOW_SIZE_480 : result;
    }

    public static final int CERT_FIELD_NUMBER = 6;
    private com.google.protobuf.ByteString cert_ = com.google.protobuf.ByteString.EMPTY;
    /**
     * <pre>
     * Certificate for servers that require it in PEM format
     * </pre>
     *
     * <code>optional bytes cert = 6;</code>
     * @return Whether the cert field is set.
     */
    @java.lang.Override
    public boolean hasCert() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <pre>
     * Certificate for servers that require it in PEM format
     * </pre>
     *
     * <code>optional bytes cert = 6;</code>
     * @return The cert.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getCert() {
      return cert_;
    }

    public static final int MINIMUM_BITRATE_FIELD_NUMBER = 7;
    private int minimumBitrate_ = 0;
    /**
     * <pre>
     * Minimum desired bitrate (may or may not be honored)
     * </pre>
     *
     * <code>optional int32 minimum_bitrate = 7;</code>
     * @return Whether the minimumBitrate field is set.
     */
    @java.lang.Override
    public boolean hasMinimumBitrate() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <pre>
     * Minimum desired bitrate (may or may not be honored)
     * </pre>
     *
     * <code>optional int32 minimum_bitrate = 7;</code>
     * @return The minimumBitrate.
     */
    @java.lang.Override
    public int getMinimumBitrate() {
      return minimumBitrate_;
    }

    public static final int MAXIMUM_BITRATE_FIELD_NUMBER = 8;
    private int maximumBitrate_ = 0;
    /**
     * <pre>
     * Maximum desired bitrate (may or may not be honored)
     * </pre>
     *
     * <code>optional int32 maximum_bitrate = 8;</code>
     * @return Whether the maximumBitrate field is set.
     */
    @java.lang.Override
    public boolean hasMaximumBitrate() {
      return ((bitField0_ & 0x00000020) != 0);
    }
    /**
     * <pre>
     * Maximum desired bitrate (may or may not be honored)
     * </pre>
     *
     * <code>optional int32 maximum_bitrate = 8;</code>
     * @return The maximumBitrate.
     */
    @java.lang.Override
    public int getMaximumBitrate() {
      return maximumBitrate_;
    }

    public static final int STARTING_BITRATE_FIELD_NUMBER = 9;
    private int startingBitrate_ = 0;
    /**
     * <pre>
     * Starting bitrate
     * </pre>
     *
     * <code>optional int32 starting_bitrate = 9;</code>
     * @return Whether the startingBitrate field is set.
     */
    @java.lang.Override
    public boolean hasStartingBitrate() {
      return ((bitField0_ & 0x00000040) != 0);
    }
    /**
     * <pre>
     * Starting bitrate
     * </pre>
     *
     * <code>optional int32 starting_bitrate = 9;</code>
     * @return The startingBitrate.
     */
    @java.lang.Override
    public int getStartingBitrate() {
      return startingBitrate_;
    }

    public static final int LENS_FIELD_NUMBER = 10;
    private int lens_ = 0;
    /**
     * <pre>
     * *
     * Lens to use for live stream
     *
     * The set of supported lenses is only available from the  `live_stream_lens_supported_array`
     * in &#64;ref NotifyLiveStreamStatus.
     * </pre>
     *
     * <code>optional .com.sepp89117.goeasypro_android.gopro.EnumLens lens = 10;</code>
     * @return Whether the lens field is set.
     */
    @java.lang.Override public boolean hasLens() {
      return ((bitField0_ & 0x00000080) != 0);
    }
    /**
     * <pre>
     * *
     * Lens to use for live stream
     *
     * The set of supported lenses is only available from the  `live_stream_lens_supported_array`
     * in &#64;ref NotifyLiveStreamStatus.
     * </pre>
     *
     * <code>optional .com.sepp89117.goeasypro_android.gopro.EnumLens lens = 10;</code>
     * @return The lens.
     */
    @java.lang.Override public com.sepp89117.goeasypro_android.gopro.LiveStreaming.EnumLens getLens() {
      com.sepp89117.goeasypro_android.gopro.LiveStreaming.EnumLens result = com.sepp89117.goeasypro_android.gopro.LiveStreaming.EnumLens.forNumber(lens_);
      return result == null ? com.sepp89117.goeasypro_android.gopro.LiveStreaming.EnumLens.LENS_WIDE : result;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        com.google.protobuf.GeneratedMessage.writeString(output, 1, url_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeBool(2, encode_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        output.writeEnum(3, windowSize_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        output.writeBytes(6, cert_);
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        output.writeInt32(7, minimumBitrate_);
      }
      if (((bitField0_ & 0x00000020) != 0)) {
        output.writeInt32(8, maximumBitrate_);
      }
      if (((bitField0_ & 0x00000040) != 0)) {
        output.writeInt32(9, startingBitrate_);
      }
      if (((bitField0_ & 0x00000080) != 0)) {
        output.writeEnum(10, lens_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.GeneratedMessage.computeStringSize(1, url_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(2, encode_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(3, windowSize_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(6, cert_);
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(7, minimumBitrate_);
      }
      if (((bitField0_ & 0x00000020) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(8, maximumBitrate_);
      }
      if (((bitField0_ & 0x00000040) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(9, startingBitrate_);
      }
      if (((bitField0_ & 0x00000080) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(10, lens_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.sepp89117.goeasypro_android.gopro.LiveStreaming.RequestSetLiveStreamMode)) {
        return super.equals(obj);
      }
      com.sepp89117.goeasypro_android.gopro.LiveStreaming.RequestSetLiveStreamMode other = (com.sepp89117.goeasypro_android.gopro.LiveStreaming.RequestSetLiveStreamMode) obj;

      if (hasUrl() != other.hasUrl()) return false;
      if (hasUrl()) {
        if (!getUrl()
            .equals(other.getUrl())) return false;
      }
      if (hasEncode() != other.hasEncode()) return false;
      if (hasEncode()) {
        if (getEncode()
            != other.getEncode()) return false;
      }
      if (hasWindowSize() != other.hasWindowSize()) return false;
      if (hasWindowSize()) {
        if (windowSize_ != other.windowSize_) return false;
      }
      if (hasCert() != other.hasCert()) return false;
      if (hasCert()) {
        if (!getCert()
            .equals(other.getCert())) return false;
      }
      if (hasMinimumBitrate() != other.hasMinimumBitrate()) return false;
      if (hasMinimumBitrate()) {
        if (getMinimumBitrate()
            != other.getMinimumBitrate()) return false;
      }
      if (hasMaximumBitrate() != other.hasMaximumBitrate()) return false;
      if (hasMaximumBitrate()) {
        if (getMaximumBitrate()
            != other.getMaximumBitrate()) return false;
      }
      if (hasStartingBitrate() != other.hasStartingBitrate()) return false;
      if (hasStartingBitrate()) {
        if (getStartingBitrate()
            != other.getStartingBitrate()) return false;
      }
      if (hasLens() != other.hasLens()) return false;
      if (hasLens()) {
        if (lens_ != other.lens_) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasUrl()) {
        hash = (37 * hash) + URL_FIELD_NUMBER;
        hash = (53 * hash) + getUrl().hashCode();
      }
      if (hasEncode()) {
        hash = (37 * hash) + ENCODE_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getEncode());
      }
      if (hasWindowSize()) {
        hash = (37 * hash) + WINDOW_SIZE_FIELD_NUMBER;
        hash = (53 * hash) + windowSize_;
      }
      if (hasCert()) {
        hash = (37 * hash) + CERT_FIELD_NUMBER;
        hash = (53 * hash) + getCert().hashCode();
      }
      if (hasMinimumBitrate()) {
        hash = (37 * hash) + MINIMUM_BITRATE_FIELD_NUMBER;
        hash = (53 * hash) + getMinimumBitrate();
      }
      if (hasMaximumBitrate()) {
        hash = (37 * hash) + MAXIMUM_BITRATE_FIELD_NUMBER;
        hash = (53 * hash) + getMaximumBitrate();
      }
      if (hasStartingBitrate()) {
        hash = (37 * hash) + STARTING_BITRATE_FIELD_NUMBER;
        hash = (53 * hash) + getStartingBitrate();
      }
      if (hasLens()) {
        hash = (37 * hash) + LENS_FIELD_NUMBER;
        hash = (53 * hash) + lens_;
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.sepp89117.goeasypro_android.gopro.LiveStreaming.RequestSetLiveStreamMode parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sepp89117.goeasypro_android.gopro.LiveStreaming.RequestSetLiveStreamMode parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sepp89117.goeasypro_android.gopro.LiveStreaming.RequestSetLiveStreamMode parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sepp89117.goeasypro_android.gopro.LiveStreaming.RequestSetLiveStreamMode parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sepp89117.goeasypro_android.gopro.LiveStreaming.RequestSetLiveStreamMode parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sepp89117.goeasypro_android.gopro.LiveStreaming.RequestSetLiveStreamMode parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sepp89117.goeasypro_android.gopro.LiveStreaming.RequestSetLiveStreamMode parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static com.sepp89117.goeasypro_android.gopro.LiveStreaming.RequestSetLiveStreamMode parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static com.sepp89117.goeasypro_android.gopro.LiveStreaming.RequestSetLiveStreamMode parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static com.sepp89117.goeasypro_android.gopro.LiveStreaming.RequestSetLiveStreamMode parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.sepp89117.goeasypro_android.gopro.LiveStreaming.RequestSetLiveStreamMode parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static com.sepp89117.goeasypro_android.gopro.LiveStreaming.RequestSetLiveStreamMode parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.sepp89117.goeasypro_android.gopro.LiveStreaming.RequestSetLiveStreamMode prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * *
     * Configure Live Streaming
     *
     * Response: &#64;ref ResponseGeneric
     * </pre>
     *
     * Protobuf type {@code com.sepp89117.goeasypro_android.gopro.RequestSetLiveStreamMode}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:com.sepp89117.goeasypro_android.gopro.RequestSetLiveStreamMode)
        com.sepp89117.goeasypro_android.gopro.LiveStreaming.RequestSetLiveStreamModeOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.sepp89117.goeasypro_android.gopro.LiveStreaming.internal_static_com_sepp89117_goeasypro_android_gopro_RequestSetLiveStreamMode_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.sepp89117.goeasypro_android.gopro.LiveStreaming.internal_static_com_sepp89117_goeasypro_android_gopro_RequestSetLiveStreamMode_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.sepp89117.goeasypro_android.gopro.LiveStreaming.RequestSetLiveStreamMode.class, com.sepp89117.goeasypro_android.gopro.LiveStreaming.RequestSetLiveStreamMode.Builder.class);
      }

      // Construct using com.sepp89117.goeasypro_android.gopro.LiveStreaming.RequestSetLiveStreamMode.newBuilder()
      Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        url_ = "";
        encode_ = false;
        windowSize_ = 4;
        cert_ = com.google.protobuf.ByteString.EMPTY;
        minimumBitrate_ = 0;
        maximumBitrate_ = 0;
        startingBitrate_ = 0;
        lens_ = 0;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.sepp89117.goeasypro_android.gopro.LiveStreaming.internal_static_com_sepp89117_goeasypro_android_gopro_RequestSetLiveStreamMode_descriptor;
      }

      @java.lang.Override
      public com.sepp89117.goeasypro_android.gopro.LiveStreaming.RequestSetLiveStreamMode getDefaultInstanceForType() {
        return com.sepp89117.goeasypro_android.gopro.LiveStreaming.RequestSetLiveStreamMode.getDefaultInstance();
      }

      @java.lang.Override
      public com.sepp89117.goeasypro_android.gopro.LiveStreaming.RequestSetLiveStreamMode build() {
        com.sepp89117.goeasypro_android.gopro.LiveStreaming.RequestSetLiveStreamMode result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.sepp89117.goeasypro_android.gopro.LiveStreaming.RequestSetLiveStreamMode buildPartial() {
        com.sepp89117.goeasypro_android.gopro.LiveStreaming.RequestSetLiveStreamMode result = new com.sepp89117.goeasypro_android.gopro.LiveStreaming.RequestSetLiveStreamMode(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(com.sepp89117.goeasypro_android.gopro.LiveStreaming.RequestSetLiveStreamMode result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.url_ = url_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.encode_ = encode_;
          to_bitField0_ |= 0x00000002;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.windowSize_ = windowSize_;
          to_bitField0_ |= 0x00000004;
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.cert_ = cert_;
          to_bitField0_ |= 0x00000008;
        }
        if (((from_bitField0_ & 0x00000010) != 0)) {
          result.minimumBitrate_ = minimumBitrate_;
          to_bitField0_ |= 0x00000010;
        }
        if (((from_bitField0_ & 0x00000020) != 0)) {
          result.maximumBitrate_ = maximumBitrate_;
          to_bitField0_ |= 0x00000020;
        }
        if (((from_bitField0_ & 0x00000040) != 0)) {
          result.startingBitrate_ = startingBitrate_;
          to_bitField0_ |= 0x00000040;
        }
        if (((from_bitField0_ & 0x00000080) != 0)) {
          result.lens_ = lens_;
          to_bitField0_ |= 0x00000080;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.sepp89117.goeasypro_android.gopro.LiveStreaming.RequestSetLiveStreamMode) {
          return mergeFrom((com.sepp89117.goeasypro_android.gopro.LiveStreaming.RequestSetLiveStreamMode)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.sepp89117.goeasypro_android.gopro.LiveStreaming.RequestSetLiveStreamMode other) {
        if (other == com.sepp89117.goeasypro_android.gopro.LiveStreaming.RequestSetLiveStreamMode.getDefaultInstance()) return this;
        if (other.hasUrl()) {
          url_ = other.url_;
          bitField0_ |= 0x00000001;
          onChanged();
        }
        if (other.hasEncode()) {
          setEncode(other.getEncode());
        }
        if (other.hasWindowSize()) {
          setWindowSize(other.getWindowSize());
        }
        if (other.hasCert()) {
          setCert(other.getCert());
        }
        if (other.hasMinimumBitrate()) {
          setMinimumBitrate(other.getMinimumBitrate());
        }
        if (other.hasMaximumBitrate()) {
          setMaximumBitrate(other.getMaximumBitrate());
        }
        if (other.hasStartingBitrate()) {
          setStartingBitrate(other.getStartingBitrate());
        }
        if (other.hasLens()) {
          setLens(other.getLens());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                url_ = input.readBytes();
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 16: {
                encode_ = input.readBool();
                bitField0_ |= 0x00000002;
                break;
              } // case 16
              case 24: {
                int tmpRaw = input.readEnum();
                com.sepp89117.goeasypro_android.gopro.LiveStreaming.EnumWindowSize tmpValue =
                    com.sepp89117.goeasypro_android.gopro.LiveStreaming.EnumWindowSize.forNumber(tmpRaw);
                if (tmpValue == null) {
                  mergeUnknownVarintField(3, tmpRaw);
                } else {
                  windowSize_ = tmpRaw;
                  bitField0_ |= 0x00000004;
                }
                break;
              } // case 24
              case 50: {
                cert_ = input.readBytes();
                bitField0_ |= 0x00000008;
                break;
              } // case 50
              case 56: {
                minimumBitrate_ = input.readInt32();
                bitField0_ |= 0x00000010;
                break;
              } // case 56
              case 64: {
                maximumBitrate_ = input.readInt32();
                bitField0_ |= 0x00000020;
                break;
              } // case 64
              case 72: {
                startingBitrate_ = input.readInt32();
                bitField0_ |= 0x00000040;
                break;
              } // case 72
              case 80: {
                int tmpRaw = input.readEnum();
                com.sepp89117.goeasypro_android.gopro.LiveStreaming.EnumLens tmpValue =
                    com.sepp89117.goeasypro_android.gopro.LiveStreaming.EnumLens.forNumber(tmpRaw);
                if (tmpValue == null) {
                  mergeUnknownVarintField(10, tmpRaw);
                } else {
                  lens_ = tmpRaw;
                  bitField0_ |= 0x00000080;
                }
                break;
              } // case 80
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private java.lang.Object url_ = "";
      /**
       * <pre>
       * RTMP(S) URL used for live stream
       * </pre>
       *
       * <code>optional string url = 1;</code>
       * @return Whether the url field is set.
       */
      public boolean hasUrl() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * RTMP(S) URL used for live stream
       * </pre>
       *
       * <code>optional string url = 1;</code>
       * @return The url.
       */
      public java.lang.String getUrl() {
        java.lang.Object ref = url_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            url_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * RTMP(S) URL used for live stream
       * </pre>
       *
       * <code>optional string url = 1;</code>
       * @return The bytes for url.
       */
      public com.google.protobuf.ByteString
          getUrlBytes() {
        java.lang.Object ref = url_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          url_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * RTMP(S) URL used for live stream
       * </pre>
       *
       * <code>optional string url = 1;</code>
       * @param value The url to set.
       * @return This builder for chaining.
       */
      public Builder setUrl(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        url_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * RTMP(S) URL used for live stream
       * </pre>
       *
       * <code>optional string url = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearUrl() {
        url_ = getDefaultInstance().getUrl();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * RTMP(S) URL used for live stream
       * </pre>
       *
       * <code>optional string url = 1;</code>
       * @param value The bytes for url to set.
       * @return This builder for chaining.
       */
      public Builder setUrlBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        url_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }

      private boolean encode_ ;
      /**
       * <pre>
       * Save media to sdcard while streaming?
       * </pre>
       *
       * <code>optional bool encode = 2;</code>
       * @return Whether the encode field is set.
       */
      @java.lang.Override
      public boolean hasEncode() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * Save media to sdcard while streaming?
       * </pre>
       *
       * <code>optional bool encode = 2;</code>
       * @return The encode.
       */
      @java.lang.Override
      public boolean getEncode() {
        return encode_;
      }
      /**
       * <pre>
       * Save media to sdcard while streaming?
       * </pre>
       *
       * <code>optional bool encode = 2;</code>
       * @param value The encode to set.
       * @return This builder for chaining.
       */
      public Builder setEncode(boolean value) {

        encode_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Save media to sdcard while streaming?
       * </pre>
       *
       * <code>optional bool encode = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearEncode() {
        bitField0_ = (bitField0_ & ~0x00000002);
        encode_ = false;
        onChanged();
        return this;
      }

      private int windowSize_ = 4;
      /**
       * <pre>
       * *
       * Resolution to use for live stream
       *
       * The set of supported resolutions is only available from the `live_stream_window_size_supported_array`
       * in &#64;ref NotifyLiveStreamStatus.
       * </pre>
       *
       * <code>optional .com.sepp89117.goeasypro_android.gopro.EnumWindowSize window_size = 3;</code>
       * @return Whether the windowSize field is set.
       */
      @java.lang.Override public boolean hasWindowSize() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <pre>
       * *
       * Resolution to use for live stream
       *
       * The set of supported resolutions is only available from the `live_stream_window_size_supported_array`
       * in &#64;ref NotifyLiveStreamStatus.
       * </pre>
       *
       * <code>optional .com.sepp89117.goeasypro_android.gopro.EnumWindowSize window_size = 3;</code>
       * @return The windowSize.
       */
      @java.lang.Override
      public com.sepp89117.goeasypro_android.gopro.LiveStreaming.EnumWindowSize getWindowSize() {
        com.sepp89117.goeasypro_android.gopro.LiveStreaming.EnumWindowSize result = com.sepp89117.goeasypro_android.gopro.LiveStreaming.EnumWindowSize.forNumber(windowSize_);
        return result == null ? com.sepp89117.goeasypro_android.gopro.LiveStreaming.EnumWindowSize.WINDOW_SIZE_480 : result;
      }
      /**
       * <pre>
       * *
       * Resolution to use for live stream
       *
       * The set of supported resolutions is only available from the `live_stream_window_size_supported_array`
       * in &#64;ref NotifyLiveStreamStatus.
       * </pre>
       *
       * <code>optional .com.sepp89117.goeasypro_android.gopro.EnumWindowSize window_size = 3;</code>
       * @param value The windowSize to set.
       * @return This builder for chaining.
       */
      public Builder setWindowSize(com.sepp89117.goeasypro_android.gopro.LiveStreaming.EnumWindowSize value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000004;
        windowSize_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * *
       * Resolution to use for live stream
       *
       * The set of supported resolutions is only available from the `live_stream_window_size_supported_array`
       * in &#64;ref NotifyLiveStreamStatus.
       * </pre>
       *
       * <code>optional .com.sepp89117.goeasypro_android.gopro.EnumWindowSize window_size = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearWindowSize() {
        bitField0_ = (bitField0_ & ~0x00000004);
        windowSize_ = 4;
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString cert_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <pre>
       * Certificate for servers that require it in PEM format
       * </pre>
       *
       * <code>optional bytes cert = 6;</code>
       * @return Whether the cert field is set.
       */
      @java.lang.Override
      public boolean hasCert() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <pre>
       * Certificate for servers that require it in PEM format
       * </pre>
       *
       * <code>optional bytes cert = 6;</code>
       * @return The cert.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getCert() {
        return cert_;
      }
      /**
       * <pre>
       * Certificate for servers that require it in PEM format
       * </pre>
       *
       * <code>optional bytes cert = 6;</code>
       * @param value The cert to set.
       * @return This builder for chaining.
       */
      public Builder setCert(com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        cert_ = value;
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Certificate for servers that require it in PEM format
       * </pre>
       *
       * <code>optional bytes cert = 6;</code>
       * @return This builder for chaining.
       */
      public Builder clearCert() {
        bitField0_ = (bitField0_ & ~0x00000008);
        cert_ = getDefaultInstance().getCert();
        onChanged();
        return this;
      }

      private int minimumBitrate_ ;
      /**
       * <pre>
       * Minimum desired bitrate (may or may not be honored)
       * </pre>
       *
       * <code>optional int32 minimum_bitrate = 7;</code>
       * @return Whether the minimumBitrate field is set.
       */
      @java.lang.Override
      public boolean hasMinimumBitrate() {
        return ((bitField0_ & 0x00000010) != 0);
      }
      /**
       * <pre>
       * Minimum desired bitrate (may or may not be honored)
       * </pre>
       *
       * <code>optional int32 minimum_bitrate = 7;</code>
       * @return The minimumBitrate.
       */
      @java.lang.Override
      public int getMinimumBitrate() {
        return minimumBitrate_;
      }
      /**
       * <pre>
       * Minimum desired bitrate (may or may not be honored)
       * </pre>
       *
       * <code>optional int32 minimum_bitrate = 7;</code>
       * @param value The minimumBitrate to set.
       * @return This builder for chaining.
       */
      public Builder setMinimumBitrate(int value) {

        minimumBitrate_ = value;
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Minimum desired bitrate (may or may not be honored)
       * </pre>
       *
       * <code>optional int32 minimum_bitrate = 7;</code>
       * @return This builder for chaining.
       */
      public Builder clearMinimumBitrate() {
        bitField0_ = (bitField0_ & ~0x00000010);
        minimumBitrate_ = 0;
        onChanged();
        return this;
      }

      private int maximumBitrate_ ;
      /**
       * <pre>
       * Maximum desired bitrate (may or may not be honored)
       * </pre>
       *
       * <code>optional int32 maximum_bitrate = 8;</code>
       * @return Whether the maximumBitrate field is set.
       */
      @java.lang.Override
      public boolean hasMaximumBitrate() {
        return ((bitField0_ & 0x00000020) != 0);
      }
      /**
       * <pre>
       * Maximum desired bitrate (may or may not be honored)
       * </pre>
       *
       * <code>optional int32 maximum_bitrate = 8;</code>
       * @return The maximumBitrate.
       */
      @java.lang.Override
      public int getMaximumBitrate() {
        return maximumBitrate_;
      }
      /**
       * <pre>
       * Maximum desired bitrate (may or may not be honored)
       * </pre>
       *
       * <code>optional int32 maximum_bitrate = 8;</code>
       * @param value The maximumBitrate to set.
       * @return This builder for chaining.
       */
      public Builder setMaximumBitrate(int value) {

        maximumBitrate_ = value;
        bitField0_ |= 0x00000020;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Maximum desired bitrate (may or may not be honored)
       * </pre>
       *
       * <code>optional int32 maximum_bitrate = 8;</code>
       * @return This builder for chaining.
       */
      public Builder clearMaximumBitrate() {
        bitField0_ = (bitField0_ & ~0x00000020);
        maximumBitrate_ = 0;
        onChanged();
        return this;
      }

      private int startingBitrate_ ;
      /**
       * <pre>
       * Starting bitrate
       * </pre>
       *
       * <code>optional int32 starting_bitrate = 9;</code>
       * @return Whether the startingBitrate field is set.
       */
      @java.lang.Override
      public boolean hasStartingBitrate() {
        return ((bitField0_ & 0x00000040) != 0);
      }
      /**
       * <pre>
       * Starting bitrate
       * </pre>
       *
       * <code>optional int32 starting_bitrate = 9;</code>
       * @return The startingBitrate.
       */
      @java.lang.Override
      public int getStartingBitrate() {
        return startingBitrate_;
      }
      /**
       * <pre>
       * Starting bitrate
       * </pre>
       *
       * <code>optional int32 starting_bitrate = 9;</code>
       * @param value The startingBitrate to set.
       * @return This builder for chaining.
       */
      public Builder setStartingBitrate(int value) {

        startingBitrate_ = value;
        bitField0_ |= 0x00000040;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Starting bitrate
       * </pre>
       *
       * <code>optional int32 starting_bitrate = 9;</code>
       * @return This builder for chaining.
       */
      public Builder clearStartingBitrate() {
        bitField0_ = (bitField0_ & ~0x00000040);
        startingBitrate_ = 0;
        onChanged();
        return this;
      }

      private int lens_ = 0;
      /**
       * <pre>
       * *
       * Lens to use for live stream
       *
       * The set of supported lenses is only available from the  `live_stream_lens_supported_array`
       * in &#64;ref NotifyLiveStreamStatus.
       * </pre>
       *
       * <code>optional .com.sepp89117.goeasypro_android.gopro.EnumLens lens = 10;</code>
       * @return Whether the lens field is set.
       */
      @java.lang.Override public boolean hasLens() {
        return ((bitField0_ & 0x00000080) != 0);
      }
      /**
       * <pre>
       * *
       * Lens to use for live stream
       *
       * The set of supported lenses is only available from the  `live_stream_lens_supported_array`
       * in &#64;ref NotifyLiveStreamStatus.
       * </pre>
       *
       * <code>optional .com.sepp89117.goeasypro_android.gopro.EnumLens lens = 10;</code>
       * @return The lens.
       */
      @java.lang.Override
      public com.sepp89117.goeasypro_android.gopro.LiveStreaming.EnumLens getLens() {
        com.sepp89117.goeasypro_android.gopro.LiveStreaming.EnumLens result = com.sepp89117.goeasypro_android.gopro.LiveStreaming.EnumLens.forNumber(lens_);
        return result == null ? com.sepp89117.goeasypro_android.gopro.LiveStreaming.EnumLens.LENS_WIDE : result;
      }
      /**
       * <pre>
       * *
       * Lens to use for live stream
       *
       * The set of supported lenses is only available from the  `live_stream_lens_supported_array`
       * in &#64;ref NotifyLiveStreamStatus.
       * </pre>
       *
       * <code>optional .com.sepp89117.goeasypro_android.gopro.EnumLens lens = 10;</code>
       * @param value The lens to set.
       * @return This builder for chaining.
       */
      public Builder setLens(com.sepp89117.goeasypro_android.gopro.LiveStreaming.EnumLens value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000080;
        lens_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * *
       * Lens to use for live stream
       *
       * The set of supported lenses is only available from the  `live_stream_lens_supported_array`
       * in &#64;ref NotifyLiveStreamStatus.
       * </pre>
       *
       * <code>optional .com.sepp89117.goeasypro_android.gopro.EnumLens lens = 10;</code>
       * @return This builder for chaining.
       */
      public Builder clearLens() {
        bitField0_ = (bitField0_ & ~0x00000080);
        lens_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.sepp89117.goeasypro_android.gopro.RequestSetLiveStreamMode)
    }

    // @@protoc_insertion_point(class_scope:com.sepp89117.goeasypro_android.gopro.RequestSetLiveStreamMode)
    private static final com.sepp89117.goeasypro_android.gopro.LiveStreaming.RequestSetLiveStreamMode DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.sepp89117.goeasypro_android.gopro.LiveStreaming.RequestSetLiveStreamMode();
    }

    public static com.sepp89117.goeasypro_android.gopro.LiveStreaming.RequestSetLiveStreamMode getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<RequestSetLiveStreamMode>
        PARSER = new com.google.protobuf.AbstractParser<RequestSetLiveStreamMode>() {
      @java.lang.Override
      public RequestSetLiveStreamMode parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<RequestSetLiveStreamMode> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<RequestSetLiveStreamMode> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.sepp89117.goeasypro_android.gopro.LiveStreaming.RequestSetLiveStreamMode getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_com_sepp89117_goeasypro_android_gopro_NotifyLiveStreamStatus_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_sepp89117_goeasypro_android_gopro_NotifyLiveStreamStatus_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_com_sepp89117_goeasypro_android_gopro_RequestGetLiveStreamStatus_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_sepp89117_goeasypro_android_gopro_RequestGetLiveStreamStatus_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_com_sepp89117_goeasypro_android_gopro_RequestSetLiveStreamMode_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_sepp89117_goeasypro_android_gopro_RequestSetLiveStreamMode_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\024live_streaming.proto\022%com.sepp89117.go" +
      "easypro_android.gopro\"\267\005\n\026NotifyLiveStre" +
      "amStatus\022W\n\022live_stream_status\030\001 \001(\0162;.c" +
      "om.sepp89117.goeasypro_android.gopro.Enu" +
      "mLiveStreamStatus\022U\n\021live_stream_error\030\002" +
      " \001(\0162:.com.sepp89117.goeasypro_android.g" +
      "opro.EnumLiveStreamError\022\032\n\022live_stream_" +
      "encode\030\003 \001(\010\022\033\n\023live_stream_bitrate\030\004 \001(" +
      "\005\022f\n\'live_stream_window_size_supported_a" +
      "rray\030\005 \003(\01625.com.sepp89117.goeasypro_and" +
      "roid.gopro.EnumWindowSize\022$\n\034live_stream" +
      "_encode_supported\030\006 \001(\010\022(\n live_stream_m" +
      "ax_lens_unsupported\030\007 \001(\010\022*\n\"live_stream" +
      "_minimum_stream_bitrate\030\010 \001(\005\022*\n\"live_st" +
      "ream_maximum_stream_bitrate\030\t \001(\005\022\"\n\032liv" +
      "e_stream_lens_supported\030\n \001(\010\022Y\n live_st" +
      "ream_lens_supported_array\030\013 \003(\0162/.com.se" +
      "pp89117.goeasypro_android.gopro.EnumLens" +
      "\022%\n\035live_stream_protune_supported\030\r \001(\010\"" +
      "\362\001\n\032RequestGetLiveStreamStatus\022h\n\033regist" +
      "er_live_stream_status\030\001 \003(\0162C.com.sepp89" +
      "117.goeasypro_android.gopro.EnumRegister" +
      "LiveStreamStatus\022j\n\035unregister_live_stre" +
      "am_status\030\002 \003(\0162C.com.sepp89117.goeasypr" +
      "o_android.gopro.EnumRegisterLiveStreamSt" +
      "atus\"\234\002\n\030RequestSetLiveStreamMode\022\013\n\003url" +
      "\030\001 \001(\t\022\016\n\006encode\030\002 \001(\010\022J\n\013window_size\030\003 " +
      "\001(\01625.com.sepp89117.goeasypro_android.go" +
      "pro.EnumWindowSize\022\014\n\004cert\030\006 \001(\014\022\027\n\017mini" +
      "mum_bitrate\030\007 \001(\005\022\027\n\017maximum_bitrate\030\010 \001" +
      "(\005\022\030\n\020starting_bitrate\030\t \001(\005\022=\n\004lens\030\n \001" +
      "(\0162/.com.sepp89117.goeasypro_android.gop" +
      "ro.EnumLens*>\n\010EnumLens\022\r\n\tLENS_WIDE\020\000\022\017" +
      "\n\013LENS_LINEAR\020\004\022\022\n\016LENS_SUPERVIEW\020\003*\336\003\n\023" +
      "EnumLiveStreamError\022\032\n\026LIVE_STREAM_ERROR" +
      "_NONE\020\000\022\035\n\031LIVE_STREAM_ERROR_NETWORK\020\001\022\"" +
      "\n\036LIVE_STREAM_ERROR_CREATESTREAM\020\002\022!\n\035LI" +
      "VE_STREAM_ERROR_OUTOFMEMORY\020\003\022!\n\035LIVE_ST" +
      "REAM_ERROR_INPUTSTREAM\020\004\022\036\n\032LIVE_STREAM_" +
      "ERROR_INTERNET\020\005\022\037\n\033LIVE_STREAM_ERROR_OS" +
      "NETWORK\020\006\022,\n(LIVE_STREAM_ERROR_SELECTEDN" +
      "ETWORKTIMEOUT\020\007\022#\n\037LIVE_STREAM_ERROR_SSL" +
      "_HANDSHAKE\020\010\022$\n LIVE_STREAM_ERROR_CAMERA" +
      "_BLOCKED\020\t\022\035\n\031LIVE_STREAM_ERROR_UNKNOWN\020" +
      "\n\022\"\n\036LIVE_STREAM_ERROR_SD_CARD_FULL\020(\022%\n" +
      "!LIVE_STREAM_ERROR_SD_CARD_REMOVED\020)*\243\002\n" +
      "\024EnumLiveStreamStatus\022\032\n\026LIVE_STREAM_STA" +
      "TE_IDLE\020\000\022\034\n\030LIVE_STREAM_STATE_CONFIG\020\001\022" +
      "\033\n\027LIVE_STREAM_STATE_READY\020\002\022\037\n\033LIVE_STR" +
      "EAM_STATE_STREAMING\020\003\022&\n\"LIVE_STREAM_STA" +
      "TE_COMPLETE_STAY_ON\020\004\022$\n LIVE_STREAM_STA" +
      "TE_FAILED_STAY_ON\020\005\022\"\n\036LIVE_STREAM_STATE" +
      "_RECONNECTING\020\006\022!\n\035LIVE_STREAM_STATE_UNA" +
      "VAILABLE\020\007*\274\001\n\034EnumRegisterLiveStreamSta" +
      "tus\022&\n\"REGISTER_LIVE_STREAM_STATUS_STATU" +
      "S\020\001\022%\n!REGISTER_LIVE_STREAM_STATUS_ERROR" +
      "\020\002\022$\n REGISTER_LIVE_STREAM_STATUS_MODE\020\003" +
      "\022\'\n#REGISTER_LIVE_STREAM_STATUS_BITRATE\020" +
      "\004*P\n\016EnumWindowSize\022\023\n\017WINDOW_SIZE_480\020\004" +
      "\022\023\n\017WINDOW_SIZE_720\020\007\022\024\n\020WINDOW_SIZE_108" +
      "0\020\014"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        });
    internal_static_com_sepp89117_goeasypro_android_gopro_NotifyLiveStreamStatus_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_com_sepp89117_goeasypro_android_gopro_NotifyLiveStreamStatus_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_com_sepp89117_goeasypro_android_gopro_NotifyLiveStreamStatus_descriptor,
        new java.lang.String[] { "LiveStreamStatus", "LiveStreamError", "LiveStreamEncode", "LiveStreamBitrate", "LiveStreamWindowSizeSupportedArray", "LiveStreamEncodeSupported", "LiveStreamMaxLensUnsupported", "LiveStreamMinimumStreamBitrate", "LiveStreamMaximumStreamBitrate", "LiveStreamLensSupported", "LiveStreamLensSupportedArray", "LiveStreamProtuneSupported", });
    internal_static_com_sepp89117_goeasypro_android_gopro_RequestGetLiveStreamStatus_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_com_sepp89117_goeasypro_android_gopro_RequestGetLiveStreamStatus_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_com_sepp89117_goeasypro_android_gopro_RequestGetLiveStreamStatus_descriptor,
        new java.lang.String[] { "RegisterLiveStreamStatus", "UnregisterLiveStreamStatus", });
    internal_static_com_sepp89117_goeasypro_android_gopro_RequestSetLiveStreamMode_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_com_sepp89117_goeasypro_android_gopro_RequestSetLiveStreamMode_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_com_sepp89117_goeasypro_android_gopro_RequestSetLiveStreamMode_descriptor,
        new java.lang.String[] { "Url", "Encode", "WindowSize", "Cert", "MinimumBitrate", "MaximumBitrate", "StartingBitrate", "Lens", });
    descriptor.resolveAllFeaturesImmutable();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
